import { __decorate } from "tslib";
import { Directive, EventEmitter, Inject, Input, Output, PLATFORM_ID, } from '@angular/core';
import { TooltipContainerComponent } from './tooltip.component';
import { TooltipConfig } from './tooltip.service';
import { OnChange } from '../utils/decorators';
import { isPlatformBrowser } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { coerceBooleanProperty, coerceNumberProperty, } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "../utils/positioning/positioning.service";
import * as i2 from "../utils/component-loader/component-loader.factory";
import * as i3 from "./tooltip.service";
export class TooltipDirective {
    constructor(_renderer, _elementRef, _positionService, _viewContainerRef, cis, config, platformId) {
        this._elementRef = _elementRef;
        this._positionService = _positionService;
        this.platformId = platformId;
        /** Fired when tooltip content changes */
        this.tooltipChange = new EventEmitter();
        this._tooltipDisabled = false;
        this._dynamicPosition = true;
        this._delay = 0;
        this._fadeDuration = 150;
        this._destroy$ = new Subject();
        this.isBrowser = false;
        this.isBrowser = isPlatformBrowser(this.platformId);
        this._tooltip = cis
            .createLoader(this._elementRef, _viewContainerRef, _renderer)
            .provide({ provide: TooltipConfig, useValue: config });
        Object.assign(this, config);
        this.onShown = this._tooltip.onShown;
        this.shown = this._tooltip.onShown;
        this.onHidden = this._tooltip.onHidden;
        this.hidden = this._tooltip.onHidden;
    }
    /**
     * Returns whether or not the tooltip is currently being shown
     */
    get isOpen() {
        return this._tooltip.isShown;
    }
    set isOpen(value) {
        const isOpen = coerceBooleanProperty(value);
        if (isOpen) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    /**
     * Allows to disable tooltip
     */
    get tooltipDisabled() {
        return this._tooltipDisabled;
    }
    set tooltipDisabled(value) {
        this._tooltipDisabled = coerceBooleanProperty(value);
    }
    get dynamicPosition() {
        return this._dynamicPosition;
    }
    set dynamicPosition(value) {
        this._dynamicPosition = coerceBooleanProperty(value);
    }
    get delay() {
        return this._delay;
    }
    set delay(value) {
        this._delay = coerceNumberProperty(value);
    }
    get fadeDuration() {
        return this._fadeDuration;
    }
    set fadeDuration(value) {
        this._fadeDuration = coerceNumberProperty(value);
    }
    ngOnInit() {
        this._tooltip.listen({
            triggers: this.triggers,
            show: () => this.show(),
        });
        this.tooltipChange.pipe(takeUntil(this._destroy$)).subscribe((value) => {
            if (!value) {
                this._tooltip.hide();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes['mdbTooltip'] && !changes['mdbTooltip'].isFirstChange()) {
            this.tooltipChange.emit(this.mdbTooltip);
        }
    }
    /**
     * Toggles an element’s tooltip. This is considered a “manual” triggering of
     * the tooltip.
     */
    toggle() {
        if (this.isOpen) {
            return this.hide();
        }
        this.show();
    }
    /**
     * Opens an element’s tooltip. This is considered a “manual” triggering of
     * the tooltip.
     */
    show() {
        if (this.isOpen || this.tooltipDisabled || !this.mdbTooltip) {
            return;
        }
        if (this._delayTimeoutId) {
            clearTimeout(this._delayTimeoutId);
            this._delayTimeoutId = undefined;
        }
        this._positionService.setOptions({
            modifiers: {
                flip: {
                    enabled: this.dynamicPosition,
                },
                preventOverflow: {
                    enabled: this.dynamicPosition,
                },
            },
        });
        const showTooltip = () => {
            this._tooltip
                .attach(TooltipContainerComponent)
                .to(this.container)
                .position({ attachment: this.placement })
                .show({
                content: this.mdbTooltip,
                placement: this.placement,
            });
        };
        this.showTooltip(showTooltip);
    }
    showTooltip(fn) {
        if (this.delay) {
            this._delayTimeoutId = setTimeout(() => {
                fn();
            }, this.delay);
        }
        else {
            fn();
        }
    }
    /**
     * Closes an element’s tooltip. This is considered a “manual” triggering of
     * the tooltip.
     */
    hide() {
        if (this._delayTimeoutId) {
            clearTimeout(this._delayTimeoutId);
            this._delayTimeoutId = undefined;
        }
        if (!this._tooltip.isShown) {
            return;
        }
        this._tooltip.instance.classMap.in = false;
        setTimeout(() => {
            this._tooltip.hide();
        }, this.fadeDuration);
    }
    dispose() {
        this._tooltip.dispose();
    }
    ngOnDestroy() {
        this._tooltip.dispose();
        this._destroy$.next();
        this._destroy$.complete();
    }
}
TooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: TooltipDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.PositioningService }, { token: i0.ViewContainerRef }, { token: i2.ComponentLoaderFactory }, { token: i3.TooltipConfig }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });
TooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.7", type: TooltipDirective, selector: "[mdbTooltip]", inputs: { mdbTooltip: "mdbTooltip", placement: "placement", triggers: "triggers", container: "container", isOpen: "isOpen", tooltipDisabled: "tooltipDisabled", dynamicPosition: "dynamicPosition", delay: "delay", customHeight: "customHeight", fadeDuration: "fadeDuration" }, outputs: { tooltipChange: "tooltipChange", onShown: "onShown", shown: "shown", onHidden: "onHidden", hidden: "hidden" }, exportAs: ["mdb-tooltip"], usesOnChanges: true, ngImport: i0 });
__decorate([
    OnChange()
], TooltipDirective.prototype, "mdbTooltip", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: TooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[mdbTooltip]',
                    exportAs: 'mdb-tooltip',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.PositioningService }, { type: i0.ViewContainerRef }, { type: i2.ComponentLoaderFactory }, { type: i3.TooltipConfig }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { mdbTooltip: [{
                type: Input
            }], tooltipChange: [{
                type: Output
            }], placement: [{
                type: Input
            }], triggers: [{
                type: Input
            }], container: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], tooltipDisabled: [{
                type: Input
            }], dynamicPosition: [{
                type: Input
            }], onShown: [{
                type: Output
            }], shown: [{
                type: Output
            }], onHidden: [{
                type: Output
            }], hidden: [{
                type: Output
            }], delay: [{
                type: Input
            }], customHeight: [{
                type: Input
            }], fadeDuration: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,