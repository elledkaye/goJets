import { Component, ViewChild, Input, ContentChildren, Output, EventEmitter, ChangeDetectionStrategy, Optional, } from '@angular/core';
import { state, style, trigger, transition, animate } from '@angular/animations';
import { RouterLinkWithHref, NavigationEnd } from '@angular/router';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class SBItemBodyComponent {
    constructor(el, _cdRef, router) {
        this.el = el;
        this._cdRef = _cdRef;
        this.router = router;
        this.animationStateChange = new EventEmitter();
        this.id = `mdb-accordion-`;
        this.height = '0';
        this._destroy$ = new Subject();
        this.expandAnimationState = 'collapsed';
        this.ariaLabelledBy = '';
    }
    toggle(collapsed) {
        setTimeout(() => {
            collapsed
                ? (this.expandAnimationState = 'collapsed')
                : (this.expandAnimationState = 'expanded');
            this._cdRef.markForCheck();
        }, 0);
    }
    animationCallback() {
        this.animationStateChange.emit({
            state: this.expandAnimationState,
            accordionEl: this.el.nativeElement.parentElement.parentElement,
        });
    }
    openSidenavOnActiveLink() {
        if (typeof window !== 'undefined' && window) {
            const pathStrategyUrl = window.location.pathname;
            const hashStrategyUrl = window.location.hash;
            const activeLink = this.routerLinks.find((link) => {
                const params = link.href.split('?')[1];
                if (params) {
                    return (link.href.split('?')[0] === pathStrategyUrl ||
                        link.href.split('?')[0] === hashStrategyUrl);
                }
                else {
                    return link.href === pathStrategyUrl || link.href === hashStrategyUrl;
                }
            });
            const sbItem = this.el.nativeElement.parentNode;
            if (activeLink) {
                setTimeout(() => {
                    this.expandAnimationState = 'expanded';
                    if (sbItem) {
                        sbItem.classList.add('active');
                        sbItem.classList.remove('is-collapsed');
                    }
                    this._cdRef.markForCheck();
                }, 10);
            }
            else if (this.expandAnimationState !== 'collapsed' && activeLink) {
                setTimeout(() => {
                    this.expandAnimationState = 'collapsed';
                    if (sbItem) {
                        sbItem.classList.remove('active');
                        sbItem.classList.add('is-collapsed');
                    }
                    this._cdRef.markForCheck();
                }, 10);
            }
        }
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.collapsed
                ? (this.expandAnimationState = 'collapsed')
                : (this.expandAnimationState = 'expanded');
            if (this.router && this.autoExpand) {
                this.router.events
                    .pipe(takeUntil(this._destroy$), filter(event => event instanceof NavigationEnd))
                    .subscribe(() => {
                    this.openSidenavOnActiveLink();
                });
            }
        }, 0);
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.unsubscribe();
    }
}
SBItemBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SBItemBodyComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Router, optional: true }], target: i0.ɵɵFactoryTarget.Component });
SBItemBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: SBItemBodyComponent, selector: "mdb-item-body, mdb-accordion-item-body", inputs: { customClass: "customClass" }, outputs: { animationStateChange: "animationStateChange" }, queries: [{ propertyName: "routerLinks", predicate: RouterLinkWithHref, descendants: true }], viewQueries: [{ propertyName: "bodyEl", first: true, predicate: ["body"], descendants: true, static: true }], exportAs: ["sbItemBody"], ngImport: i0, template: "<div #body class=\"sb-item-body\"\n     [style.height]=\"height\"\n     (@expandBody.done)=\"animationCallback()\"\n     [@expandBody]=\"expandAnimationState\"\n     [id]=\"id\"\n     role=\"region\"\n     [attr.aria-labelledby]=\"ariaLabelledBy\">\n    <div class=\"card-body {{ customClass }}\">\n    \t<ng-content></ng-content>\n    </div>\n</div>\n", animations: [
        trigger('expandBody', [
            state('collapsed', style({ height: '0px', visibility: 'hidden' })),
            state('expanded', style({ height: '*', visibility: 'visible' })),
            transition('expanded <=> collapsed', animate('500ms ease')),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SBItemBodyComponent, decorators: [{
            type: Component,
            args: [{ exportAs: 'sbItemBody', selector: 'mdb-item-body, mdb-accordion-item-body', changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        trigger('expandBody', [
                            state('collapsed', style({ height: '0px', visibility: 'hidden' })),
                            state('expanded', style({ height: '*', visibility: 'visible' })),
                            transition('expanded <=> collapsed', animate('500ms ease')),
                        ]),
                    ], template: "<div #body class=\"sb-item-body\"\n     [style.height]=\"height\"\n     (@expandBody.done)=\"animationCallback()\"\n     [@expandBody]=\"expandAnimationState\"\n     [id]=\"id\"\n     role=\"region\"\n     [attr.aria-labelledby]=\"ariaLabelledBy\">\n    <div class=\"card-body {{ customClass }}\">\n    \t<ng-content></ng-content>\n    </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Router, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { customClass: [{
                type: Input
            }], animationStateChange: [{
                type: Output
            }], routerLinks: [{
                type: ContentChildren,
                args: [RouterLinkWithHref, { descendants: true }]
            }], bodyEl: [{
                type: ViewChild,
                args: ['body', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,