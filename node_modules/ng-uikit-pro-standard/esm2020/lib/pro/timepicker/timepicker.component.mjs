import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter, } from '@angular/core';
import { OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { merge } from 'rxjs';
import { filter } from 'rxjs/operators';
import { ESCAPE } from '../../free/utils/keyboard-navigation';
import { MdbTimePickerContentComponent } from './timepicker.content';
import { Subject } from 'rxjs';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class MdbTimePickerComponent {
    constructor(_overlay, _vcr // private _cdRef: ChangeDetectorRef
    ) {
        this._overlay = _overlay;
        this._vcr = _vcr;
        this._autoClose = false;
        this.clearButton = 'clear';
        this.closeButton = 'close';
        this.okButton = 'ok';
        this.rounding = 1;
        this._twelveHour = true;
        this.timeChange = new EventEmitter();
        this.cancel = new EventEmitter();
        this.done = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.show = new EventEmitter();
        this._value = '12:00AM';
        this._selectionChange$ = new Subject();
        this.onChangeCb = () => { };
        this.onTouchedCb = () => { };
    }
    get autoClose() {
        return this._autoClose;
    }
    set autoClose(value) {
        this._autoClose = coerceBooleanProperty(value);
    }
    get twelveHour() {
        return this._twelveHour;
    }
    set twelveHour(value) {
        this._twelveHour = coerceBooleanProperty(value);
    }
    _patchInputValues() {
        this._contentRef.instance.picker = this;
        this._contentRef.instance.autoClose = this.autoClose;
        this._contentRef.instance.clearButton = this.clearButton;
        this._contentRef.instance.closeButton = this.closeButton;
        this._contentRef.instance.okButton = this.okButton;
        this._contentRef.instance.rounding = this.rounding;
        this._contentRef.instance.twelveHour = this.twelveHour;
        this._contentRef.instance.value = this._timeToObj(this._value);
        if (this.max) {
            this._contentRef.instance.max = this._timeToObj(this.max);
        }
        if (this.min) {
            this._contentRef.instance.min = this._timeToObj(this.min);
        }
    }
    _timeToObj(time) {
        const round = (x, roundBy) => {
            return x % roundBy < Math.round(roundBy / 2)
                ? x % roundBy === 0
                    ? x
                    : Math.ceil(x / roundBy) * roundBy
                : Math.floor(x / roundBy) * roundBy;
        };
        function toString(val) {
            return val < 10 ? `0${val}` : `${val}`;
        }
        const hour = Number(time.split(':')[0]);
        let minute = Number(time.split(':')[1].match(/\d+/g));
        const ampm = time.match(/AM|PM/) || [''];
        if (this.rounding) {
            minute = round(minute, this.rounding);
        }
        return {
            h: toString(hour),
            m: toString(minute),
            ampm: ampm[0],
        };
    }
    open() {
        let overlayRef = this._overlayRef;
        if (!overlayRef) {
            this._portal = new ComponentPortal(MdbTimePickerContentComponent, this._vcr);
            overlayRef = this._overlay.create(this._getOverlayConfig());
            this._overlayRef = overlayRef;
        }
        if (overlayRef && this._overlayRef && !overlayRef.hasAttached()) {
            this._contentRef = this._overlayRef.attach(this._portal);
            this._patchInputValues();
            this._listenToOutsideClick();
        }
        this._emitTimeShowEvent(this._timeToObj(this._value));
    }
    close(doneClicked, value) {
        if (this._overlayRef && this._overlayRef.hasAttached()) {
            if (!doneClicked) {
                this._emitTimeCancelEvent(value || this._timeToObj(this._value));
            }
        }
        this._destroyOverlay();
    }
    _emitTimeChangeEvent(value) {
        this.timeChange.emit({ status: 'change', value });
    }
    _emitTimeCancelEvent(value) {
        this.cancel.emit({ status: 'cancel', value });
    }
    _emitTimeDoneEvent(value) {
        const { h, m, ampm } = value;
        this.done.emit({ status: 'done', value });
        this._selectionChange$.next(this.twelveHour ? `${h}:${m}${ampm}` : `${h}:${m}`);
    }
    _emitTimeShowEvent(value) {
        this.show.emit({ status: 'open', value });
    }
    _setValue(value) {
        if (value) {
            this._value = value;
        }
        else {
            this._value = '12:00AM';
        }
    }
    setInput(input) {
        this.input = input;
        input._valueChange.subscribe((val) => {
            const match = val && val.match(/\d\d:\d\d(AM|PM)?/gi);
            if (match) {
                this._value = match[0];
            }
            else {
                this._value = '12:00AM';
            }
        });
    }
    registerOnChange(fn) {
        this.onChangeCb = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCb = fn;
    }
    _getOverlayConfig() {
        const positionStrategy = this._overlay
            .position()
            .global()
            .centerHorizontally()
            .centerVertically();
        const overlayConfig = new OverlayConfig({
            hasBackdrop: true,
            scrollStrategy: this._overlay.scrollStrategies.block(),
            positionStrategy,
        });
        return overlayConfig;
    }
    _destroyOverlay() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    _listenToOutsideClick() {
        if (this._overlayRef) {
            merge(this._overlayRef.backdropClick(), this._overlayRef.detachments(), this._overlayRef.keydownEvents().pipe(filter((event) => {
                // Closing on alt + up is only valid when there's an input associated with the datepicker.
                return event.keyCode === ESCAPE;
            }))).subscribe((event) => {
                if (event) {
                    event.preventDefault();
                }
                this.close();
                this._destroyOverlay();
            });
        }
    }
    ngOnDestroy() {
        this._destroyOverlay();
    }
}
MdbTimePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTimePickerComponent, deps: [{ token: i1.Overlay }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
MdbTimePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbTimePickerComponent, selector: "mdb-timepicker", inputs: { autoClose: "autoClose", clearButton: "clearButton", closeButton: "closeButton", max: "max", min: "min", okButton: "okButton", rounding: "rounding", twelveHour: "twelveHour" }, outputs: { timeChange: "timeChange", cancel: "cancel", done: "done", show: "show" }, exportAs: ["mdbTimePicker"], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTimePickerComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                    selector: 'mdb-timepicker',
                    exportAs: 'mdbTimePicker',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ViewContainerRef }]; }, propDecorators: { autoClose: [{
                type: Input
            }], clearButton: [{
                type: Input
            }], closeButton: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], okButton: [{
                type: Input
            }], rounding: [{
                type: Input
            }], twelveHour: [{
                type: Input
            }], timeChange: [{
                type: Output
            }], cancel: [{
                type: Output
            }], done: [{
                type: Output
            }], show: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,