import { Directive, HostListener, Input, HostBinding } from '@angular/core';
import * as i0 from "@angular/core";
export class MdbCreditCardDirective {
    constructor() {
        this.standardPattern = /(\d{1,4})/g;
        this.defaultCard = {
            name: '',
            fullName: '',
            re: /\d{0,16}/,
            pattern: this.standardPattern,
            maxLength: 19,
            cvvLength: 3,
        };
        this.cards = [
            {
                name: 'visa',
                fullName: 'Visa',
                re: /^4\d{0,15}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'mastercard',
                fullName: 'Mastercard',
                re: /^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'amex',
                fullName: 'American Express',
                re: /^3[47]\d{0,13}/,
                pattern: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
                maxLength: 15,
                cvvLength: 4,
            },
            {
                name: 'jcb',
                fullName: 'JCB',
                re: /^(?:35\d{0,2})\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'discover',
                fullName: 'Discover',
                re: /^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'diners-club',
                fullName: 'Diners Club',
                re: /^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,
                pattern: this.standardPattern,
                maxLength: 14,
                cvvLength: 3,
            },
        ];
        this._separator = ' ';
    }
    get additionalCards() {
        return this._additionalCards;
    }
    set additionalCards(cards) {
        this._additionalCards = cards;
        this.addCards(cards);
    }
    get separator() {
        return this._separator;
    }
    set separator(separator) {
        this._separator = separator;
    }
    onInput(event) {
        this.formatInput(event);
    }
    formatInput(event) {
        const input = event.target.value;
        const formattedInput = this.getFormattedInput(input);
        event.target.value = formattedInput;
    }
    getFormattedInput(value) {
        value = this.removeNonDigits(value);
        const card = this.findCardByNumber(value);
        this.updateCurrentCardNames(card.name, card.fullName);
        let cardNumMaxLength;
        if (this.hasStandardPattern(card)) {
            const matches = value.match(card.pattern);
            if (matches === null) {
                return value;
            }
            cardNumMaxLength = card.maxLength + matches.length - 1;
            this.maxLength = cardNumMaxLength.toString();
            return matches.join(this.separator);
        }
        else {
            const results = card.pattern.exec(value);
            if (results === null) {
                return value;
            }
            results.shift();
            cardNumMaxLength = card.maxLength + results.length - 1;
            this.maxLength = cardNumMaxLength.toString();
            return results.filter(this.isMatch).join(this.separator);
        }
    }
    removeNonDigits(value) {
        return value.replace(/\D/g, '');
    }
    hasStandardPattern(card) {
        return card.pattern.toString() === this.standardPattern.toString();
    }
    isMatch(match) {
        return match !== undefined;
    }
    updateCurrentCardNames(name, fullName) {
        this.cardName = name;
        this.cardFullName = fullName;
    }
    findCardByNumber(value) {
        const cardType = this.cards.find(card => {
            return card.re.test(value);
        });
        if (!cardType) {
            return this.defaultCard;
        }
        return cardType;
    }
    addCards(newCards) {
        newCards.forEach(card => {
            this.cards.push(card);
        });
    }
}
MdbCreditCardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCreditCardDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MdbCreditCardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.7", type: MdbCreditCardDirective, selector: "[mdbCreditCard]", inputs: { additionalCards: "additionalCards", separator: "separator" }, host: { listeners: { "input": "onInput($event)" }, properties: { "attr.maxLength": "this.maxLength" } }, exportAs: ["mdbCreditCard"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCreditCardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[mdbCreditCard]',
                    exportAs: 'mdbCreditCard',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { additionalCards: [{
                type: Input
            }], separator: [{
                type: Input
            }], maxLength: [{
                type: HostBinding,
                args: ['attr.maxLength']
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,