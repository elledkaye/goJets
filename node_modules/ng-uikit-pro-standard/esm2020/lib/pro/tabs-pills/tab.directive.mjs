import { Directive, EventEmitter, HostBinding, Input, Output, Inject, PLATFORM_ID, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { coerceBooleanProperty, coerceNumberProperty, } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "./tabset.component";
export class TabDirective {
    constructor(platformId, tabset, el, renderer) {
        this.tabset = tabset;
        this.el = el;
        this.renderer = renderer;
        this._disabled = false;
        this._removable = false;
        /** fired when tab became active, $event:Tab equals to selected instance of Tab component */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
        /** fired when tab became inactive, $event:Tab equals to deselected instance of Tab component */
        this.deselect = new EventEmitter();
        /** fired before tab will be removed */
        this.removed = new EventEmitter();
        this.addClass = true;
        this.test = true;
        this._active = false;
        this.isBrowser = null;
        this.isBrowser = isPlatformBrowser(platformId);
        this.tabset = tabset;
    }
    /** if true tab can not be activated */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        if (this._disabled && this._active) {
            this.tabset.initActiveTab();
        }
    }
    /** if true tab can be removable, additional button will appear */
    get removable() {
        return this._removable;
    }
    set removable(value) {
        this._removable = coerceBooleanProperty(value);
    }
    get tabOrder() {
        return this._tabOrder;
    }
    set tabOrder(value) {
        this._tabOrder = coerceNumberProperty(value);
    }
    /** tab active state toggle */
    get active() {
        return this._active;
    }
    set active(value) {
        const active = coerceBooleanProperty(value);
        if ((this.disabled && active) || !active) {
            if (this._active && !active) {
                this.renderer.removeClass(this.el.nativeElement, 'show');
                this.renderer.removeClass(this.el.nativeElement, 'active');
                this._active = active;
                this.deselect.emit(this);
            }
            return;
        }
        this.renderer.addClass(this.el.nativeElement, 'show');
        this.renderer.addClass(this.el.nativeElement, 'active');
        this._active = active;
        this.select.emit(this);
        this.tabset.tabs.forEach((mdbTab) => {
            if (mdbTab !== this) {
                mdbTab.active = false;
            }
        });
    }
    ngOnInit() {
        this.removable = this.removable;
        this.tabset.addTab(this);
        this.tabset.initActiveTab();
    }
    ngOnDestroy() {
        this.tabset.removeTab(this);
    }
}
TabDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: TabDirective, deps: [{ token: PLATFORM_ID }, { token: i1.TabsetComponent }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
TabDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.7", type: TabDirective, selector: "mdb-tab, [mdbTab]", inputs: { type: "type", heading: "heading", disabled: "disabled", removable: "removable", customClass: "customClass", tabOrder: "tabOrder", active: "active" }, outputs: { select: "select", deselect: "deselect", removed: "removed" }, host: { properties: { "class.tab-pane": "this.addClass", "class.fade": "this.test" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: TabDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'mdb-tab, [mdbTab]' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i1.TabsetComponent }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { type: [{
                type: Input
            }], heading: [{
                type: Input
            }], disabled: [{
                type: Input
            }], removable: [{
                type: Input
            }], customClass: [{
                type: Input
            }], tabOrder: [{
                type: Input
            }], active: [{
                type: Input
            }], select: [{
                type: Output
            }], deselect: [{
                type: Output
            }], removed: [{
                type: Output
            }], addClass: [{
                type: HostBinding,
                args: ['class.tab-pane']
            }], test: [{
                type: HostBinding,
                args: ['class.fade']
            }] } });
//# sourceMappingURL=data:application/json;base64,