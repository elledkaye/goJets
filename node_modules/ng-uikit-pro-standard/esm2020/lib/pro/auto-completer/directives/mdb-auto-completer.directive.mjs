import { Directive, EventEmitter, Inject, Input, Output, forwardRef, HostListener, HostBinding, } from '@angular/core';
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Utils } from '../../../free/utils';
import { TAB, ESCAPE, ENTER } from '../../../free/utils/keyboard-navigation';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
export const MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    useExisting: forwardRef(() => MdbAutoCompleterDirective),
    multi: true,
};
export class MdbAutoCompleterDirective {
    constructor(renderer, el, platformId, document) {
        this.renderer = renderer;
        this.el = el;
        this.document = document;
        this.ngModelChange = new EventEmitter();
        this.clearBtnClicked = new EventEmitter();
        this._destroy$ = new Subject();
        this._canOpenOnFocus = true;
        this.utils = new Utils();
        this._disabled = false;
        this._onChange = () => { };
        this._onTouched = () => { };
        this.isBrowser = isPlatformBrowser(platformId);
    }
    get isDisabled() {
        return this._disabled;
    }
    onKeydown(event) {
        this._handleKeyDown(event);
        const isTabKey = event.keyCode === TAB;
        if (isTabKey) {
            this._hide();
        }
    }
    _handleInput(event) {
        if (!this._isOpen()) {
            this._show();
        }
        this._onChange(event.target.value);
        this.mdbAutoCompleter.removeHighlight(0);
        this.mdbAutoCompleter.highlightRow(0);
        this._updateClearButtonVisibility();
    }
    _handleFocusIn() {
        if (!this._canOpenOnFocus) {
            this._canOpenOnFocus = true;
        }
        else {
            this._show();
        }
    }
    /*
  fix(completer): Resolve problem with closing autocompleter dropdown
  when not neccessary (eg. clicking on button which is not an mdb-option.
  Without calling this _hide() method, autocompleter dropdown won't close
  after switching focus programmatically to another element.
  */
    _handleBlurIn() {
        this._canOpenOnFocus = this.document.activeElement !== this.el.nativeElement;
        this._onTouched();
    }
    handleMouseDown() {
        this.mdbAutoCompleter.highlightRow(0);
    }
    _renderClearButton() {
        const el = this.renderer.createElement('button');
        this._setStyles(el, {
            visibility: 'hidden',
        });
        this._addClass(el, ['mdb-autocomplete-clear']);
        this.renderer.setAttribute(el, 'type', 'button');
        this.renderer.setAttribute(el, 'tabindex', this.mdbAutoCompleter.clearButtonTabIndex.toString());
        this.listenToClearClick = this.renderer.listen(el, 'click', () => {
            this.clearBtnClicked.emit();
            this._onChange('');
        });
        if (this.isBrowser) {
            const parent = this.utils.getClosestEl(this.el.nativeElement, '.md-form') || this.el.nativeElement;
            this.renderer.appendChild(parent, el);
        }
    }
    _updateClearButtonVisibility() {
        const clearButtonVisibility = this.el.nativeElement.value.length > 0 ? 'visible' : 'hidden';
        if (this.mdbAutoCompleter.clearButton) {
            const clearButton = this.el.nativeElement.parentElement.lastElementChild;
            this._setStyles(clearButton, { visibility: clearButtonVisibility });
        }
    }
    _setStyles(target, styles) {
        Object.keys(styles).forEach((prop) => {
            this.renderer.setStyle(target, prop, styles[prop]);
        });
        return this;
    }
    _addClass(target, name) {
        name.forEach((el) => {
            this.renderer.addClass(target, el);
        });
    }
    _clearInput() {
        this.el.nativeElement.value = '';
        this.ngModelChange.emit('');
        const clearButton = this.el.nativeElement.parentElement.lastElementChild;
        this._setStyles(clearButton, { visibility: 'hidden' });
    }
    clear() {
        this._clearInput();
    }
    _handleKeyDown(event) {
        this.mdbAutoCompleter.navigateUsingKeyboard(event);
        const key = event.keyCode;
        if (key !== ESCAPE && key !== ENTER && key !== TAB) {
            this.mdbAutoCompleter.show();
        }
    }
    getCoords(elem) {
        if (this.isBrowser) {
            const box = elem.getBoundingClientRect();
            const body = document.body;
            const docEl = document.documentElement;
            const scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
            const scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
            const clientTop = docEl.clientTop || body.clientTop || 0;
            const clientLeft = docEl.clientLeft || body.clientLeft || 0;
            const top = box.top + scrollTop - clientTop;
            const left = box.left + scrollLeft - clientLeft;
            return { top: Math.round(top), left: Math.round(left) };
        }
    }
    _isOpen() {
        return this.mdbAutoCompleter.isOpen();
    }
    _show() {
        if (this._disabled) {
            return;
        }
        this.mdbAutoCompleter.show();
        setTimeout(() => {
            if (this.mdbAutoCompleter.appendToBody) {
                if (this.utils.getClosestEl(this.el.nativeElement, '.modal-body')) {
                    setTimeout(() => {
                        this.renderer.setStyle(this.mdbAutoCompleter.dropdown.nativeElement, 'z-index', '1100');
                    }, 0);
                }
            }
        }, 0);
    }
    _hide() {
        this.mdbAutoCompleter.hide();
    }
    _appendDropdownToInput() {
        const position = this.el.nativeElement.getBoundingClientRect();
        const el = this.el.nativeElement;
        const style = window.getComputedStyle(this.el.nativeElement);
        const height = ['height', 'padding-top', 'padding-bottom', 'margin-top', 'margin-bottom']
            .map(key => parseInt(style.getPropertyValue(key), 10))
            .reduce((prev, cur) => prev + cur);
        this.mdbAutoCompleter.parameters = {
            left: this.getCoords(el).left,
            top: this.getCoords(el).top + height,
            width: position.width,
            bottom: window.innerHeight - height - el.getBoundingClientRect().top,
            inputHeight: this.el.nativeElement.offsetHeight,
        };
        // Adding delay here help to resolve strange bug in Firefox when input
        // keydown listener doesn't work if dropdown is appended to body
        setTimeout(() => {
            this.mdbAutoCompleter.appendDropdown();
        }, 0);
    }
    ngAfterViewInit() {
        this.mdbAutoCompleter
            .selectedItemChanged()
            .pipe(takeUntil(this._destroy$))
            .subscribe((item) => {
            const displayedValue = this.mdbAutoCompleter && this.mdbAutoCompleter.displayValue
                ? this.mdbAutoCompleter.displayValue(item.text)
                : item.text;
            this.el.nativeElement.value = displayedValue;
            this._onChange(item.text);
            const clearButtonVisibility = this.el.nativeElement.value.length > 0 ? 'visible' : 'hidden';
            const clearButton = this.el.nativeElement.parentElement.lastElementChild;
            this._setStyles(clearButton, { visibility: clearButtonVisibility });
            if (item) {
                this._canOpenOnFocus = false;
                this.el.nativeElement.focus();
                this._hide();
            }
        });
        this.mdbAutoCompleter.origin = this.el;
        this.mdbAutoCompleter._isDropdownOpen
            .pipe(takeUntil(this._destroy$))
            .subscribe((state) => {
            if (state) {
                this._appendDropdownToInput();
                if (!this.listenFunc) {
                    this.listenFunc = this.renderer.listen('document', 'click', event => {
                        if (this.mdbAutoCompleter.dropdown &&
                            !this.mdbAutoCompleter.dropdown.nativeElement.contains(event.target) &&
                            !this.el.nativeElement.contains(event.target)) {
                            this._hide();
                        }
                    });
                }
            }
            else {
                if (this.listenFunc) {
                    this.listenFunc();
                    this.listenFunc = null;
                }
            }
        });
        if (this.mdbAutoCompleter.clearButton && this.isBrowser) {
            this._renderClearButton();
            const clearButton = this.el.nativeElement.parentElement.querySelectorAll('.mdb-autocomplete-clear')[0];
            this._clearButton = this.document.querySelector('.mdb-autocomplete-clear');
            this.renderer.listen(clearButton, 'focus', () => {
                ['click', 'keydown:space', 'keydown:enter'].forEach(event => this.renderer.listen(clearButton, event, () => {
                    this._clearInput();
                }));
            });
            this.renderer.listen(clearButton, 'click', () => {
                this._clearInput();
            });
            if (this.el.nativeElement.disabled) {
                this.renderer.setAttribute(clearButton, 'disabled', 'true');
            }
            this._autocompleterInputChanges = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.attributeName === 'disabled') {
                        this.renderer.setAttribute(this._clearButton, 'disabled', 'true');
                    }
                });
            });
            this._autocompleterInputChanges.observe(this.el.nativeElement, {
                attributes: true,
                childList: true,
                characterData: true,
            });
        }
    }
    ngOnDestroy() {
        if (this._autocompleterInputChanges) {
            this._autocompleterInputChanges.disconnect();
        }
        if (this.listenToClearClick) {
            this.listenToClearClick();
        }
        if (this.listenFunc) {
            this.listenFunc();
        }
        this._destroy$.next();
        this._destroy$.complete();
    }
    writeValue(value) {
        Promise.resolve(null).then(() => {
            const displayedValue = this.mdbAutoCompleter && this.mdbAutoCompleter.displayValue
                ? this.mdbAutoCompleter.displayValue(value)
                : value;
            this.el.nativeElement.value = displayedValue;
            this._updateClearButtonVisibility();
        });
    }
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
MdbAutoCompleterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbAutoCompleterDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
MdbAutoCompleterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.7", type: MdbAutoCompleterDirective, selector: "input[mdbAutoCompleter], textarea[mdbAutoCompleter]", inputs: { mdbAutoCompleter: "mdbAutoCompleter" }, outputs: { ngModelChange: "ngModelChange", clearBtnClicked: "clearBtnClicked" }, host: { listeners: { "input": "_handleInput($event)", "focusin": "_handleFocusIn()", "blur": "_handleBlurIn()", "mousedown": "handleMouseDown()", "keydown": "onKeydown($event)" }, properties: { "class.disabled": "this.isDisabled" } }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: ["mdbAutoCompleterTrigger"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbAutoCompleterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[mdbAutoCompleter], textarea[mdbAutoCompleter]',
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(input)': '_handleInput($event)',
                        '(focusin)': '_handleFocusIn()',
                        '(blur)': '_handleBlurIn()',
                        '(mousedown)': '_handleMouseDown()',
                    },
                    exportAs: 'mdbAutoCompleterTrigger',
                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { mdbAutoCompleter: [{
                type: Input
            }], ngModelChange: [{
                type: Output
            }], clearBtnClicked: [{
                type: Output
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], _handleInput: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], _handleFocusIn: [{
                type: HostListener,
                args: ['focusin']
            }], _handleBlurIn: [{
                type: HostListener,
                args: ['blur']
            }], handleMouseDown: [{
                type: HostListener,
                args: ['mousedown']
            }] } });
//# sourceMappingURL=data:application/json;base64,