import { Component, ContentChildren, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID, ViewChild, ViewEncapsulation, } from '@angular/core';
import { MdbOptionComponent, MDB_OPTION_PARENT } from './mdb-option.component';
import { Subject, merge } from 'rxjs';
import { isPlatformBrowser } from '@angular/common';
import { document, window } from '../../../free/utils/facade/browser';
import { Utils } from './../../../free/utils/utils.class';
import { startWith, switchMap, takeUntil } from 'rxjs/operators';
import { DOWN_ARROW, ENTER, ESCAPE, UP_ARROW } from '../../../free/utils/keyboard-navigation';
import { coerceBooleanProperty, coerceNumberProperty, } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class MdbAutoCompleterComponent {
    constructor(renderer, el, platformId) {
        this.renderer = renderer;
        this.el = el;
        this._clearButton = true;
        this._clearButtonTabIndex = 0;
        this._appendToBody = false;
        this.dropdownPosition = 'auto';
        this._disabled = false;
        this._optionHeight = 45;
        // equal to 4 * optionHeight (which is 45 by default)
        this._dropdownHeight = 180;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
        this.selected = new EventEmitter();
        this._destroy = new Subject();
        this.utils = new Utils();
        this._isDropdownOpen = new Subject();
        this._allItems = [];
        this._isOpen = false;
        this._selectedItemIndex = -1;
        this._selectedItemChanged = new Subject();
        this._isBrowser = false;
        this._isBrowser = isPlatformBrowser(platformId);
        this.renderer.addClass(this.el.nativeElement, 'mdb-auto-completer');
    }
    get clearButton() {
        return this._clearButton;
    }
    set clearButton(value) {
        this._clearButton = coerceBooleanProperty(value);
    }
    get clearButtonTabIndex() {
        return this._clearButtonTabIndex;
    }
    set clearButtonTabIndex(value) {
        this._clearButtonTabIndex = coerceNumberProperty(value);
    }
    get appendToBody() {
        return this._appendToBody;
    }
    set appendToBody(value) {
        this._appendToBody = coerceBooleanProperty(value);
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get visibleOptions() {
        return this._visibleOptions;
    }
    set visibleOptions(value) {
        const number = coerceNumberProperty(value);
        if (number !== 0) {
            this._visibleOptions = number;
        }
    }
    get optionHeight() {
        return this._optionHeight;
    }
    set optionHeight(value) {
        if (value !== 0) {
            this._optionHeight = value;
        }
    }
    get dropdownHeight() {
        return this._dropdownHeight;
    }
    set dropdownHeight(value) {
        const number = coerceNumberProperty(value);
        if (number !== 0) {
            this._dropdownHeight = number;
        }
    }
    _listenToOptionClick() {
        this.mdbOptions.changes
            .pipe(startWith(this.mdbOptions), switchMap((options) => {
            return merge(...options.map((option) => option.click$));
        }), takeUntil(this._destroy))
            .subscribe((clickedOption) => this._handleOptionClick(clickedOption));
    }
    _handleOptionClick(option) {
        this.setSelectedItem({ text: option.value, element: option });
        this.highlightRow(0);
        this.select.emit({ text: option.value, element: option });
        this.selected.emit({ text: option.value, element: option });
    }
    setSelectedItem(item) {
        this._selectedItem = item;
        this._selectedItemChanged.next(this.getSelectedItem());
    }
    getSelectedItem() {
        return this._selectedItem;
    }
    selectedItemChanged() {
        return this._selectedItemChanged;
    }
    isOpen() {
        return this._isOpen;
    }
    _calculatePosition() {
        const modalEl = this.utils.getClosestEl(this.el.nativeElement, '.modal-dialog');
        const style = document.querySelector('.completer-dropdown')
            ? window.getComputedStyle(document.querySelector('.completer-dropdown'))
            : null;
        if (!style) {
            return;
        }
        const height = ['height', 'padding-top', 'padding-bottom', 'margin-top', 'margin-bottom']
            .map((key) => parseInt(style.getPropertyValue(key), 10))
            .reduce((prev, cur) => prev + cur);
        const topRect = document.querySelector('.completer-dropdown').getBoundingClientRect().top;
        const bottom = modalEl ? window.innerHeight - height - topRect : this.parameters.bottom;
        const canOpenBelow = this.dropdown.nativeElement.clientHeight <= bottom;
        const belowPosition = this.parameters.inputHeight + 3;
        const abovePosition = `-${this.dropdown.nativeElement.clientHeight}`;
        let top;
        if (this.dropdownPosition === 'auto') {
            top = canOpenBelow ? belowPosition : abovePosition;
        }
        else if (this.dropdownPosition === 'below') {
            top = belowPosition;
        }
        else if (this.dropdownPosition === 'above') {
            top = abovePosition;
        }
        this.renderer.setStyle(this.dropdown.nativeElement, 'top', top + 'px');
        this.renderer.setStyle(this.dropdown.nativeElement, 'left', 0 + 'px');
        this.renderer.setStyle(this.dropdown.nativeElement, 'width', this.parameters.width + 'px');
    }
    _calculateAppendPosition() {
        if (this._isBrowser) {
            setTimeout(() => {
                const originRect = this.origin.nativeElement.getBoundingClientRect();
                const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
                const offsetTop = originRect.top + scrollTop;
                const height = originRect.height;
                const dropdownHeight = this.dropdown.nativeElement.offsetHeight;
                const inputMargin = 8;
                let top = 0;
                let left = 0;
                left = originRect.left;
                const canOpenBelow = offsetTop + dropdownHeight + height + inputMargin <=
                    scrollTop + document.documentElement.clientHeight;
                const belowPosition = offsetTop + height + inputMargin;
                const abovePosition = (top = offsetTop - dropdownHeight - inputMargin);
                if (this.dropdownPosition === 'auto') {
                    top = canOpenBelow ? belowPosition : abovePosition;
                }
                else if (this.dropdownPosition === 'below') {
                    top = belowPosition;
                }
                else if (this.dropdownPosition === 'above') {
                    top = abovePosition;
                }
                this.renderer.setStyle(this.dropdown.nativeElement, 'top', top + 'px');
                this.renderer.setStyle(this.dropdown.nativeElement, 'left', left + 'px');
                this.renderer.setStyle(this.dropdown.nativeElement, 'width', this.parameters.width + 'px');
            }, 0);
        }
    }
    show() {
        if (!this.disabled) {
            this._isOpen = true;
            this._isDropdownOpen.next(this.isOpen());
        }
        setTimeout(() => {
            if (this.dropdown && !this.appendToBody) {
                this._calculatePosition();
            }
            if (this.dropdown && this.appendToBody) {
                this._calculateAppendPosition();
            }
        }, 0);
    }
    hide() {
        if (!this.disabled) {
            this._isOpen = false;
            this._isDropdownOpen.next(this.isOpen());
        }
    }
    isDropdownOpen() {
        return this._isDropdownOpen;
    }
    removeHighlight(index) {
        setTimeout(() => {
            this.optionList.forEach((el, i) => {
                const completerRow = el.nativeElement.querySelectorAll('.completer-row');
                if (i === index) {
                    this.renderer.addClass(el.nativeElement.firstElementChild, 'highlight-row');
                }
                else if (i !== index) {
                    completerRow.forEach((elem) => {
                        this.renderer.removeClass(elem, 'highlight-row');
                    });
                }
            });
        }, 0);
    }
    highlightRow(index) {
        this._allItems = this.optionList
            .filter((el) => el.nativeElement.firstElementChild.classList.contains('completer-row'))
            .map((elem) => elem.nativeElement);
        if (this._allItems[index]) {
            this.optionList.forEach((el, i) => {
                const completerRow = el.nativeElement.querySelectorAll('.completer-row');
                if (index === i) {
                    this.removeHighlight(index);
                    this.renderer.addClass(completerRow[completerRow.length - 1], 'highlight-row');
                }
            });
        }
        this._selectedItemIndex = index;
    }
    navigateUsingKeyboard(event) {
        if (this.dropdown) {
            switch (event.keyCode) {
                case DOWN_ARROW:
                    event.preventDefault();
                    this.moveHighlightedIntoView(event.key);
                    if (!this.isOpen()) {
                        this.show();
                    }
                    if (this._selectedItemIndex + 1 <= this._allItems.length - 1) {
                        this.highlightRow(++this._selectedItemIndex);
                    }
                    else if (this._selectedItemIndex + 1 === this._allItems.length) {
                        this.highlightRow(0);
                    }
                    if (this._selectedItemIndex === 0) {
                        this.highlightRow(0);
                    }
                    const selectedElement = this.mdbOptions.find((el, index) => el && index === this._selectedItemIndex);
                    if (selectedElement) {
                        this.select.emit({ text: selectedElement.value, element: selectedElement });
                    }
                    break;
                case UP_ARROW:
                    event.preventDefault();
                    this.moveHighlightedIntoView(event.key);
                    if (this._selectedItemIndex === -1 || this._selectedItemIndex === 0) {
                        const lastItemIndex = this.mdbOptions.length;
                        this.highlightRow(lastItemIndex);
                    }
                    this.highlightRow(--this._selectedItemIndex);
                    const selectedItem = this.mdbOptions.find((el, index) => el && index === this._selectedItemIndex);
                    if (selectedItem) {
                        this.select.emit({ text: selectedItem.value, element: selectedItem });
                    }
                    break;
                case ESCAPE:
                    event.preventDefault();
                    this.hide();
                    break;
                case ENTER:
                    event.preventDefault();
                    const selectedOption = this.mdbOptions.map((el) => el)[this._selectedItemIndex];
                    if (selectedOption) {
                        this.setSelectedItem({ text: selectedOption.value, element: selectedOption });
                        this.select.emit({ text: selectedOption.value, element: selectedOption });
                        this.selected.emit({ text: selectedOption.value, element: selectedOption });
                    }
                    this.hide();
                    break;
            }
        }
    }
    moveHighlightedIntoView(type) {
        let listHeight = 0;
        let itemIndex = this._selectedItemIndex;
        this.optionList.forEach((el) => {
            listHeight += el.nativeElement.offsetHeight;
        });
        if (itemIndex > -1) {
            let itemHeight = 0;
            this.optionList.forEach((el, i) => {
                if (i === itemIndex + 1) {
                    itemHeight = el.nativeElement.firstElementChild.clientHeight;
                }
            });
            const itemTop = (itemIndex + 1) * itemHeight;
            const viewTop = this.dropdown.nativeElement.scrollTop;
            const viewBottom = viewTop + listHeight;
            if (type === 'ArrowDown') {
                this.renderer.setProperty(this.dropdown.nativeElement, 'scrollTop', itemTop - itemHeight);
            }
            else if (type === 'ArrowUp') {
                if (itemIndex === 0) {
                    itemIndex = this.optionList.length - 1;
                }
                else {
                    itemIndex--;
                }
                if (itemIndex === this._allItems.length - 2) {
                    this.renderer.setProperty(this.dropdown.nativeElement, 'scrollTop', viewBottom - itemHeight);
                }
                else {
                    this.renderer.setProperty(this.dropdown.nativeElement, 'scrollTop', itemIndex * itemHeight);
                }
            }
        }
    }
    updatePosition(parameters) {
        setTimeout(() => {
            if (this.dropdown) {
                const top = this.dropdown.nativeElement.clientHeight > parameters.bottom
                    ? parameters.top - this.dropdown.nativeElement.clientHeight
                    : parameters.top;
                this.renderer.setStyle(this.dropdown.nativeElement, 'top', top + 'px');
                this.renderer.setStyle(this.dropdown.nativeElement, 'left', parameters.left + 'px');
                this.renderer.setStyle(this.dropdown.nativeElement, 'width', parameters.width + 'px');
            }
        }, 0);
    }
    appendDropdown() {
        if (this._isBrowser && this.appendToBody) {
            const body = document.querySelector('body');
            const dropdown = this.el.nativeElement;
            if (body) {
                this.renderer.appendChild(body, dropdown);
                this._calculateAppendPosition();
            }
        }
    }
    setSingleOptionHeight() {
        this.mdbOptions.forEach((option) => {
            option._optionHeight = this._optionHeight;
        });
    }
    ngAfterContentInit() {
        this._listenToOptionClick();
        this.highlightRow(0);
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
    }
}
MdbAutoCompleterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbAutoCompleterComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
MdbAutoCompleterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbAutoCompleterComponent, selector: "mdb-auto-completer", inputs: { textNoResults: "textNoResults", clearButton: "clearButton", clearButtonTabIndex: "clearButtonTabIndex", appendToBody: "appendToBody", dropdownPosition: "dropdownPosition", disabled: "disabled", visibleOptions: "visibleOptions", optionHeight: "optionHeight", dropdownHeight: "dropdownHeight", displayValue: "displayValue" }, outputs: { select: "select", selected: "selected" }, providers: [{ provide: MDB_OPTION_PARENT, useExisting: MdbAutoCompleterComponent }], queries: [{ propertyName: "optionList", predicate: MdbOptionComponent, descendants: true, read: ElementRef }, { propertyName: "mdbOptions", predicate: MdbOptionComponent, descendants: true }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: ["dropdown"], descendants: true }, { propertyName: "noResultsEl", first: true, predicate: ["noResults"], descendants: true }], exportAs: ["mdbAutoCompleter"], ngImport: i0, template: "<div class=\"completer-dropdown-holder\" *ngIf=\"isOpen()\">\n  <div\n    class=\"completer-dropdown\"\n    #dropdown\n    [ngStyle]=\"{\n      'pointer-events': optionList.length === 0 ? 'none' : 'auto',\n      'max-height.px': _visibleOptions ? _visibleOptions * _optionHeight : _dropdownHeight\n    }\"\n  >\n    <div class=\"completer-row-wrapper\">\n      <div *ngIf=\"textNoResults && optionList.length === 0\" class=\"completer-no-results\" #noResults>\n        {{ textNoResults }}\n      </div>\n      <ng-content #content></ng-content>\n    </div>\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.mdb-autocomplete{margin-bottom:1px}.mdb-autocomplete::-webkit-search-decoration,.mdb-autocomplete::-webkit-search-cancel-button,.mdb-autocomplete::-webkit-search-results-button,.mdb-autocomplete::-webkit-search-results-decoration{-webkit-appearance:none}button:focus{outline:0!important}button.mdb-autocomplete-clear{color:#000;font-size:1rem;position:absolute;top:13px;right:4px;cursor:pointer;outline:none;background-color:transparent;border:none}button.mdb-autocomplete-clear:focus{color:#4285f4;outline:none}button.mdb-autocomplete-clear:before{content:\"\\2715\"}.md-outline .mdb-autocomplete-clear{top:8px}.mdb-autocomplete-wrap{box-shadow:0 2px 5px #00000029,0 2px 10px #0000001f;position:absolute;z-index:100;left:0;right:0;list-style-type:none;overflow-y:auto;max-height:210px;padding-left:0;background:#fff}.mdb-autocomplete-wrap li{padding:12px 15px;cursor:pointer;font-size:.875rem}.mdb-autocomplete-wrap li:hover{background:#eeeeee}.mdb-autocomplete-wrap li.selected{background-color:#eee}.form-inline .md-form .form-control.mdb-autocomplete{width:15rem}ng2-completer .completer-dropdown-holder{margin-top:-1rem}ng2-completer .md-form label{z-index:-1}mdb-auto-completer:hover{cursor:pointer}.mdb-autocomplete:hover,.mdb-autocomplete-clear:hover{cursor:pointer}.completer-dropdown{margin-top:1px;position:absolute;left:0;right:0;width:100%;background:#fff;box-shadow:0 2px 5px #00000040;z-index:110;overflow-y:auto;overflow-x:hidden}.completer-dropdown .completer-row{width:100%;display:flex;align-items:center;justify-content:space-between;padding:12px 15px;outline:none;font-size:.875rem}.completer-dropdown .completer-row .completer-description{font-size:14px}.completer-dropdown .completer-row .completer-image-holder .completer-image-default{width:16px;height:16px}.completer-dropdown .completer-no-results,.completer-dropdown .completer-searching{padding:12px 15px;font-size:.875rem}.completer-selected-row{background-color:#eee}.completer-image{width:32px;height:32px;border-radius:50%}.validate-success.ng-valid .completer-input{border-bottom:1px solid #00c851!important;box-shadow:0 1px #00c851!important}.validate-success.ng-valid .completer-holder label{color:#00c851!important}.validate-error.ng-invalid.ng-touched .completer-input,.form-submitted .validate-error.ng-invalid .completer-input{border-bottom:1px solid #f44336!important;box-shadow:0 1px #f44336!important}.validate-error.ng-invalid.ng-touched .completer-holder label,.form-submitted .validate-error.ng-invalid .completer-holder label{color:#f44336!important}.completer-row:hover,.highlight-row{background-color:#eee}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbAutoCompleterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-auto-completer', encapsulation: ViewEncapsulation.None, exportAs: 'mdbAutoCompleter', providers: [{ provide: MDB_OPTION_PARENT, useExisting: MdbAutoCompleterComponent }], template: "<div class=\"completer-dropdown-holder\" *ngIf=\"isOpen()\">\n  <div\n    class=\"completer-dropdown\"\n    #dropdown\n    [ngStyle]=\"{\n      'pointer-events': optionList.length === 0 ? 'none' : 'auto',\n      'max-height.px': _visibleOptions ? _visibleOptions * _optionHeight : _dropdownHeight\n    }\"\n  >\n    <div class=\"completer-row-wrapper\">\n      <div *ngIf=\"textNoResults && optionList.length === 0\" class=\"completer-no-results\" #noResults>\n        {{ textNoResults }}\n      </div>\n      <ng-content #content></ng-content>\n    </div>\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.mdb-autocomplete{margin-bottom:1px}.mdb-autocomplete::-webkit-search-decoration,.mdb-autocomplete::-webkit-search-cancel-button,.mdb-autocomplete::-webkit-search-results-button,.mdb-autocomplete::-webkit-search-results-decoration{-webkit-appearance:none}button:focus{outline:0!important}button.mdb-autocomplete-clear{color:#000;font-size:1rem;position:absolute;top:13px;right:4px;cursor:pointer;outline:none;background-color:transparent;border:none}button.mdb-autocomplete-clear:focus{color:#4285f4;outline:none}button.mdb-autocomplete-clear:before{content:\"\\2715\"}.md-outline .mdb-autocomplete-clear{top:8px}.mdb-autocomplete-wrap{box-shadow:0 2px 5px #00000029,0 2px 10px #0000001f;position:absolute;z-index:100;left:0;right:0;list-style-type:none;overflow-y:auto;max-height:210px;padding-left:0;background:#fff}.mdb-autocomplete-wrap li{padding:12px 15px;cursor:pointer;font-size:.875rem}.mdb-autocomplete-wrap li:hover{background:#eeeeee}.mdb-autocomplete-wrap li.selected{background-color:#eee}.form-inline .md-form .form-control.mdb-autocomplete{width:15rem}ng2-completer .completer-dropdown-holder{margin-top:-1rem}ng2-completer .md-form label{z-index:-1}mdb-auto-completer:hover{cursor:pointer}.mdb-autocomplete:hover,.mdb-autocomplete-clear:hover{cursor:pointer}.completer-dropdown{margin-top:1px;position:absolute;left:0;right:0;width:100%;background:#fff;box-shadow:0 2px 5px #00000040;z-index:110;overflow-y:auto;overflow-x:hidden}.completer-dropdown .completer-row{width:100%;display:flex;align-items:center;justify-content:space-between;padding:12px 15px;outline:none;font-size:.875rem}.completer-dropdown .completer-row .completer-description{font-size:14px}.completer-dropdown .completer-row .completer-image-holder .completer-image-default{width:16px;height:16px}.completer-dropdown .completer-no-results,.completer-dropdown .completer-searching{padding:12px 15px;font-size:.875rem}.completer-selected-row{background-color:#eee}.completer-image{width:32px;height:32px;border-radius:50%}.validate-success.ng-valid .completer-input{border-bottom:1px solid #00c851!important;box-shadow:0 1px #00c851!important}.validate-success.ng-valid .completer-holder label{color:#00c851!important}.validate-error.ng-invalid.ng-touched .completer-input,.form-submitted .validate-error.ng-invalid .completer-input{border-bottom:1px solid #f44336!important;box-shadow:0 1px #f44336!important}.validate-error.ng-invalid.ng-touched .completer-holder label,.form-submitted .validate-error.ng-invalid .completer-holder label{color:#f44336!important}.completer-row:hover,.highlight-row{background-color:#eee}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { textNoResults: [{
                type: Input
            }], clearButton: [{
                type: Input
            }], clearButtonTabIndex: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], dropdownPosition: [{
                type: Input
            }], disabled: [{
                type: Input
            }], visibleOptions: [{
                type: Input
            }], optionHeight: [{
                type: Input
            }], dropdownHeight: [{
                type: Input
            }], displayValue: [{
                type: Input
            }], select: [{
                type: Output
            }], selected: [{
                type: Output
            }], optionList: [{
                type: ContentChildren,
                args: [MdbOptionComponent, { descendants: true, read: ElementRef }]
            }], mdbOptions: [{
                type: ContentChildren,
                args: [MdbOptionComponent, { descendants: true }]
            }], dropdown: [{
                type: ViewChild,
                args: ['dropdown']
            }], noResultsEl: [{
                type: ViewChild,
                args: ['noResults']
            }] } });
//# sourceMappingURL=data:application/json;base64,