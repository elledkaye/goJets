import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, } from '@angular/core';
import { SPACE, ENTER } from '../../free/utils/keyboard-navigation';
import * as i0 from "@angular/core";
import * as i1 from "../../free/checkbox/checkbox.component";
import * as i2 from "@angular/common";
export class MdbTreeComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.checked = new EventEmitter();
        this.checkedKeys = new EventEmitter();
        this.nodesChanged = new EventEmitter();
        this._checkboxes = false;
        this._toggleOnTitleClick = false;
        this._expandAll = false;
        this.checkedValues = [];
        this.toggle = {};
    }
    set expandAll(v) {
        const value = coerceBooleanProperty(v);
        if (this.nodes && this.nodes.entries()) {
            this._expandAll = value;
            this.toggleExpandAll();
        }
    }
    get checkboxes() {
        return this._checkboxes;
    }
    set checkboxes(value) {
        this._checkboxes = coerceBooleanProperty(value);
    }
    get toggleOnTitleClick() {
        return this._toggleOnTitleClick;
    }
    set toggleOnTitleClick(value) {
        this._toggleOnTitleClick = coerceBooleanProperty(value);
    }
    ngOnInit() {
        if (this.nodes && this.nodes.entries()) {
            this._setInitialCheckedKeys();
        }
    }
    toggleExpandAll() {
        if (this._expandAll) {
            this.expandAllNodes();
        }
        else if (!this._expandAll) {
            this.closeAllNodes();
        }
    }
    expandAllNodes() {
        for (const [index, node] of this.nodes.entries()) {
            const idx = index;
            this.toggle[idx] = true;
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                this._expandAllChildren(node, idx);
            }
        }
    }
    closeAllNodes() {
        for (const [index, node] of this.nodes.entries()) {
            const idx = index;
            this.toggle[idx] = false;
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                this._closeAllChildren(node, idx);
            }
        }
    }
    _expandAllChildren(node, idx) {
        for (const [childIndex, childNode] of node[this.childrenField].entries()) {
            const childIdx = idx + '_' + childIndex;
            this.toggle[childIdx] = true;
            if (childNode[this.childrenField] && childNode[this.childrenField].length > 0) {
                this._expandAllChildren(childNode, childIdx);
            }
        }
    }
    _closeAllChildren(node, idx) {
        for (const [childIndex, childNode] of node[this.childrenField].entries()) {
            const childIdx = idx + '_' + childIndex;
            this.toggle[childIdx] = false;
            if (childNode[this.childrenField] && childNode[this.childrenField].length > 0) {
                this._closeAllChildren(childNode, childIdx);
            }
        }
    }
    _setInitialCheckedKeys() {
        for (const [index, node] of this.nodes.entries()) {
            if (node[this.checkboxesField]) {
                const idx = index;
                this.checkedValues.push(idx);
                if (node[this.childrenField] && node[this.childrenField].length > 0) {
                    this._hasInitialCheckedKeysChildren(node[this.childrenField], idx);
                }
            }
        }
    }
    _hasInitialCheckedKeysChildren(childrenNode, i) {
        for (const [childrenIdx, node] of childrenNode.entries()) {
            const idx = childrenIdx + '_' + i;
            if (node[this.checkboxesField]) {
                this.checkedValues.push(idx);
            }
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                this._hasInitialCheckedKeysChildren(node[this.childrenField], idx);
            }
        }
    }
    toggleByNode(i) {
        for (const [index, node] of this.nodes.entries()) {
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                const idx = index;
                const toggleIdx = i;
                if (idx === toggleIdx) {
                    this.toggle[idx] = !this.toggle[idx];
                    this._cdRef.markForCheck();
                }
                else {
                    this._childrenToggleByNode(node, idx, toggleIdx);
                }
            }
        }
    }
    _childrenToggleByNode(node, i, toggleIdx) {
        for (const [childIndex, childNode] of node[this.childrenField].entries()) {
            const nodeHasChildren = childNode[this.childrenField] && childNode[this.childrenField].length > 0;
            if (nodeHasChildren) {
                const idx = i + '_' + childIndex;
                if (idx === toggleIdx) {
                    this.toggle[idx] = !this.toggle[idx];
                    this._cdRef.markForCheck();
                }
                else {
                    this._childrenToggleByNode(childNode, idx, toggleIdx);
                }
            }
            else {
                return;
            }
        }
    }
    onKeydownCheckbox(e, node, i) {
        if (e.keyCode === SPACE || e.keyCode === ENTER) {
            e.preventDefault();
            this.checkNodes(node);
            this.updateNodesCheckedValues(node, i);
        }
    }
    onKeydown(e, i) {
        if (e.keyCode === SPACE || e.keyCode === ENTER) {
            e.preventDefault();
            this.toggle[i] = !this.toggle[i];
        }
    }
    checkNodes(node) {
        setTimeout(() => {
            node[this.checkboxesField] = !node[this.checkboxesField];
            this.checked.emit(node);
            this.nodesChanged.emit(this.nodes);
        }, 0);
        const nodeHasChildren = node[this.childrenField] && node[this.childrenField].length > 0;
        if (nodeHasChildren) {
            this._checkChildNodes(node[this.childrenField], !node[this.checkboxesField]);
        }
        this._cdRef.markForCheck();
    }
    _checkChildNodes(children, checked) {
        children.forEach((childNode) => {
            if (childNode[this.checkboxesField] !== undefined) {
                childNode[this.checkboxesField] = checked;
                const nodeHasChildren = childNode[this.childrenField] && childNode[this.childrenField].length > 0;
                if (nodeHasChildren) {
                    this._checkChildNodes(childNode[this.childrenField], checked);
                }
            }
        });
    }
    updateNodesCheckedValues(node, idx) {
        setTimeout(() => {
            if (node[this.checkboxesField] && !this.checkedValues.includes(idx)) {
                this.checkedValues.push(idx);
            }
            else if (!node[this.checkboxesField] && this.checkedValues.includes(idx)) {
                const removeIndex = this.checkedValues.findIndex((e) => e === idx);
                if (removeIndex !== -1) {
                    this.checkedValues.splice(removeIndex, 1);
                }
            }
            const nodeHasChildren = node[this.childrenField] && node[this.childrenField].length > 0;
            if (nodeHasChildren) {
                this._updateChildNodesCheckedValues(node[this.childrenField], idx);
            }
            this.checkedKeys.emit(this.checkedValues);
        }, 0);
    }
    _updateChildNodesCheckedValues(childrenNode, childrenIdx) {
        for (const [index, node] of childrenNode.entries()) {
            const idx = childrenIdx + '_' + index;
            if (node[this.checkboxesField] && !this.checkedValues.includes(idx)) {
                this.checkedValues.push(idx);
            }
            else if (!node[this.checkboxesField] && this.checkedValues.includes(idx)) {
                const removeIndex = this.checkedValues.findIndex((e) => e === idx);
                if (removeIndex !== -1) {
                    this.checkedValues.splice(removeIndex, 1);
                }
            }
            const nodeHasChildren = node[this.childrenField] && node[this.childrenField].length > 0;
            if (nodeHasChildren) {
                this._updateChildNodesCheckedValues(node[this.childrenField], idx);
            }
        }
    }
}
MdbTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTreeComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MdbTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbTreeComponent, selector: "mdb-tree", inputs: { nodes: "nodes", textField: "textField", childrenField: "childrenField", checkboxesField: "checkboxesField", expandAll: "expandAll", checkboxes: "checkboxes", toggleOnTitleClick: "toggleOnTitleClick" }, outputs: { checked: "checked", checkedKeys: "checkedKeys", nodesChanged: "nodesChanged" }, host: { properties: { "class.mdb-tree": "this.checked" } }, ngImport: i0, template: "<!-- child nodes -->\n<ng-template #tree let-nodeChildren let-idx=\"idx\">\n  <ul class=\"mdb-tree-list\">\n    <li *ngFor=\"let node of nodeChildren; let n = index\" class=\"mdb-tree-list-node\">\n      <div class=\"mdb-tree-container\">\n        <div *ngIf=\"node[childrenField] && node[childrenField].length > 0; else emptyIcon\">\n          <span class=\"mdb-tree-icon-container\">\n            <i\n              tabindex=\"1\"\n              aria-hidden=\"true\"\n              [ngClass]=\"\n                toggle[idx + '_' + n] ? 'mdb-tree-rotate-icon-open' : 'mdb-tree-rotate-icon-closed'\n              \"\n              (keydown)=\"onKeydown($event, idx + '_' + n)\"\n              (click)=\"toggle[idx + '_' + n] = !toggle[idx + '_' + n]\"\n              class=\"mdb-tree-indicator \"\n            ></i>\n          </span>\n        </div>\n        <ng-template #emptyIcon\n          ><span class=\"mdb-tree-icon-container\"\n            ><i class=\"mdb-tree-empty-icon\" style=\"display: block\" aria-hidden=\"true\"></i\n          ></span>\n        </ng-template>\n        <div\n          class=\"mdb-tree-checkbox-container\"\n          *ngIf=\"checkboxes && node[checkboxesField] !== undefined\"\n        >\n          <mdb-checkbox\n            class=\"checkbox-filled\"\n            [filledIn]=\"true\"\n            [tabIndex]=\"1\"\n            [attr.id]=\"node[textField]\"\n            (keydown)=\"onKeydownCheckbox($event, node, idx + '_' + n)\"\n            (click)=\"checkNodes(node); updateNodesCheckedValues(node, idx + '_' + n)\"\n            [checked]=\"node[checkboxesField]\"\n          ></mdb-checkbox>\n        </div>\n        <div *ngIf=\"checkboxes && node[checkboxesField] === undefined\">\n          <div class=\"mdb-tree-checkbox-null-container\"></div>\n        </div>\n\n        <div\n          *ngIf=\"toggleOnTitleClick\"\n          class=\"mdb-tree-text-field\"\n          [ngStyle]=\"{\n            cursor: node[childrenField] && node[childrenField].length > 0 ? 'pointer' : 'default'\n          }\"\n          (click)=\"toggle[idx + '_' + n] = !toggle[idx + '_' + n]\"\n        >\n          {{ node[textField] }}\n        </div>\n\n        <div *ngIf=\"!toggleOnTitleClick\" class=\"mdb-tree-text-field mdb-tree-text-ellipsis\">\n          {{ node[textField] }}\n        </div>\n      </div>\n      <div *ngIf=\"node[childrenField] && toggle[idx + '_' + n]\">\n        <ng-container\n          *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: idx + '_' + n }\"\n        ></ng-container>\n      </div>\n    </li>\n  </ul>\n</ng-template>\n<!-- first nodes -->\n<ul class=\"mdb-tree-list\">\n  <li *ngFor=\"let node of nodes; let i = index\" class=\"mdb-tree-list-node\">\n    <div class=\"mdb-tree-container\">\n      <div *ngIf=\"node[childrenField] && node[childrenField].length > 0; else emptyIcon\">\n        <span class=\"mdb-tree-icon-container\">\n          <i\n            tabindex=\"1\"\n            aria-hidden=\"true\"\n            [ngClass]=\"toggle[i] ? 'mdb-tree-rotate-icon-open' : 'mdb-tree-rotate-icon-closed'\"\n            (keydown)=\"onKeydown($event, i)\"\n            (click)=\"toggle[i] = !toggle[i]\"\n            class=\"mdb-tree-indicator\"\n          ></i>\n        </span>\n      </div>\n      <ng-template #emptyIcon\n        ><span class=\"mdb-tree-icon-container\"\n          ><i class=\"mdb-tree-empty-icon\" style=\"display: block\" aria-hidden=\"true\"></i\n        ></span>\n      </ng-template>\n      <div\n        class=\"mdb-tree-checkbox-container\"\n        *ngIf=\"checkboxes && node[checkboxesField] !== undefined\"\n      >\n        <mdb-checkbox\n          class=\"checkbox-filled\"\n          [checked]=\"node[checkboxesField]\"\n          [filledIn]=\"true\"\n          [tabIndex]=\"1\"\n          [attr.id]=\"node[textField]\"\n          (keydown)=\"onKeydownCheckbox($event, node, i)\"\n          (click)=\"checkNodes(node); updateNodesCheckedValues(node, i)\"\n        ></mdb-checkbox>\n      </div>\n      <div *ngIf=\"checkboxes && node[checkboxesField] === undefined\">\n        <div class=\"mdb-tree-checkbox-null-container\"></div>\n      </div>\n\n      <div\n        *ngIf=\"toggleOnTitleClick\"\n        class=\"mdb-tree-text-field\"\n        [ngStyle]=\"{\n          cursor: node[childrenField] && node[childrenField].length > 0 ? 'pointer' : 'default'\n        }\"\n        (click)=\"toggle[i] = !toggle[i]\"\n      >\n        {{ node[textField] }}\n      </div>\n\n      <div *ngIf=\"!toggleOnTitleClick\" class=\"mdb-tree-text-field mdb-tree-text-ellipsis\">\n        {{ node[textField] }}\n      </div>\n    </div>\n    <div *ngIf=\"node[childrenField] && toggle[i]\">\n      <ng-container\n        *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: i }\"\n      ></ng-container>\n    </div>\n  </li>\n</ul>\n", styles: [".mdb-tree-list{list-style-type:none;margin:0;padding:0}.mdb-tree-list-node{list-style-type:none;margin:.8rem .8rem .8rem .95rem}.mdb-tree-container{display:flex;min-width:230px}.mdb-tree-icon-container{display:inline-block;width:2rem;height:auto}.mdb-tree-empty-icon{cursor:default}.mdb-tree-text-field{margin-top:.15rem;max-width:90%;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdb-tree-checkbox-null-container{min-width:2.2rem}.mdb-tree-indicator{position:relative;right:0;transform-origin:50% 79%;margin-right:.8rem;display:inline-block;margin-right:0rem;margin-top:.025rem;cursor:pointer;font-size:1.3rem}.mdb-tree-indicator:after{content:\"\";display:block;border-style:solid;padding:5px;margin-top:.15rem;border-width:0 3px 3px 0;font-size:1.3rem;transform:rotate(45deg)}.mdb-tree-indicator:focus{color:#4285f4}.mdb-tree-indicator:focus{outline:none}.mdb-tree-rotate-icon-open{transform:rotate(0)}.mdb-tree-rotate-icon-closed{transform:rotate(270deg)}.mdb-tree-checkbox-container{margin-top:.25rem}.mdb-tree-checkbox-container mdb-checkbox.checkbox-filled [type=checkbox][class*=filled-in]:checked+label:after{border-color:#4285f4;background-color:#4285f4}\n"], components: [{ type: i1.CheckboxComponent, selector: "mdb-checkbox", inputs: ["class", "checkboxId", "required", "name", "value", "checked", "filledIn", "indeterminate", "disabled", "rounded", "checkboxPosition", "default", "inline", "tabIndex"], outputs: ["change"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-tree', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<!-- child nodes -->\n<ng-template #tree let-nodeChildren let-idx=\"idx\">\n  <ul class=\"mdb-tree-list\">\n    <li *ngFor=\"let node of nodeChildren; let n = index\" class=\"mdb-tree-list-node\">\n      <div class=\"mdb-tree-container\">\n        <div *ngIf=\"node[childrenField] && node[childrenField].length > 0; else emptyIcon\">\n          <span class=\"mdb-tree-icon-container\">\n            <i\n              tabindex=\"1\"\n              aria-hidden=\"true\"\n              [ngClass]=\"\n                toggle[idx + '_' + n] ? 'mdb-tree-rotate-icon-open' : 'mdb-tree-rotate-icon-closed'\n              \"\n              (keydown)=\"onKeydown($event, idx + '_' + n)\"\n              (click)=\"toggle[idx + '_' + n] = !toggle[idx + '_' + n]\"\n              class=\"mdb-tree-indicator \"\n            ></i>\n          </span>\n        </div>\n        <ng-template #emptyIcon\n          ><span class=\"mdb-tree-icon-container\"\n            ><i class=\"mdb-tree-empty-icon\" style=\"display: block\" aria-hidden=\"true\"></i\n          ></span>\n        </ng-template>\n        <div\n          class=\"mdb-tree-checkbox-container\"\n          *ngIf=\"checkboxes && node[checkboxesField] !== undefined\"\n        >\n          <mdb-checkbox\n            class=\"checkbox-filled\"\n            [filledIn]=\"true\"\n            [tabIndex]=\"1\"\n            [attr.id]=\"node[textField]\"\n            (keydown)=\"onKeydownCheckbox($event, node, idx + '_' + n)\"\n            (click)=\"checkNodes(node); updateNodesCheckedValues(node, idx + '_' + n)\"\n            [checked]=\"node[checkboxesField]\"\n          ></mdb-checkbox>\n        </div>\n        <div *ngIf=\"checkboxes && node[checkboxesField] === undefined\">\n          <div class=\"mdb-tree-checkbox-null-container\"></div>\n        </div>\n\n        <div\n          *ngIf=\"toggleOnTitleClick\"\n          class=\"mdb-tree-text-field\"\n          [ngStyle]=\"{\n            cursor: node[childrenField] && node[childrenField].length > 0 ? 'pointer' : 'default'\n          }\"\n          (click)=\"toggle[idx + '_' + n] = !toggle[idx + '_' + n]\"\n        >\n          {{ node[textField] }}\n        </div>\n\n        <div *ngIf=\"!toggleOnTitleClick\" class=\"mdb-tree-text-field mdb-tree-text-ellipsis\">\n          {{ node[textField] }}\n        </div>\n      </div>\n      <div *ngIf=\"node[childrenField] && toggle[idx + '_' + n]\">\n        <ng-container\n          *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: idx + '_' + n }\"\n        ></ng-container>\n      </div>\n    </li>\n  </ul>\n</ng-template>\n<!-- first nodes -->\n<ul class=\"mdb-tree-list\">\n  <li *ngFor=\"let node of nodes; let i = index\" class=\"mdb-tree-list-node\">\n    <div class=\"mdb-tree-container\">\n      <div *ngIf=\"node[childrenField] && node[childrenField].length > 0; else emptyIcon\">\n        <span class=\"mdb-tree-icon-container\">\n          <i\n            tabindex=\"1\"\n            aria-hidden=\"true\"\n            [ngClass]=\"toggle[i] ? 'mdb-tree-rotate-icon-open' : 'mdb-tree-rotate-icon-closed'\"\n            (keydown)=\"onKeydown($event, i)\"\n            (click)=\"toggle[i] = !toggle[i]\"\n            class=\"mdb-tree-indicator\"\n          ></i>\n        </span>\n      </div>\n      <ng-template #emptyIcon\n        ><span class=\"mdb-tree-icon-container\"\n          ><i class=\"mdb-tree-empty-icon\" style=\"display: block\" aria-hidden=\"true\"></i\n        ></span>\n      </ng-template>\n      <div\n        class=\"mdb-tree-checkbox-container\"\n        *ngIf=\"checkboxes && node[checkboxesField] !== undefined\"\n      >\n        <mdb-checkbox\n          class=\"checkbox-filled\"\n          [checked]=\"node[checkboxesField]\"\n          [filledIn]=\"true\"\n          [tabIndex]=\"1\"\n          [attr.id]=\"node[textField]\"\n          (keydown)=\"onKeydownCheckbox($event, node, i)\"\n          (click)=\"checkNodes(node); updateNodesCheckedValues(node, i)\"\n        ></mdb-checkbox>\n      </div>\n      <div *ngIf=\"checkboxes && node[checkboxesField] === undefined\">\n        <div class=\"mdb-tree-checkbox-null-container\"></div>\n      </div>\n\n      <div\n        *ngIf=\"toggleOnTitleClick\"\n        class=\"mdb-tree-text-field\"\n        [ngStyle]=\"{\n          cursor: node[childrenField] && node[childrenField].length > 0 ? 'pointer' : 'default'\n        }\"\n        (click)=\"toggle[i] = !toggle[i]\"\n      >\n        {{ node[textField] }}\n      </div>\n\n      <div *ngIf=\"!toggleOnTitleClick\" class=\"mdb-tree-text-field mdb-tree-text-ellipsis\">\n        {{ node[textField] }}\n      </div>\n    </div>\n    <div *ngIf=\"node[childrenField] && toggle[i]\">\n      <ng-container\n        *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: i }\"\n      ></ng-container>\n    </div>\n  </li>\n</ul>\n", styles: [".mdb-tree-list{list-style-type:none;margin:0;padding:0}.mdb-tree-list-node{list-style-type:none;margin:.8rem .8rem .8rem .95rem}.mdb-tree-container{display:flex;min-width:230px}.mdb-tree-icon-container{display:inline-block;width:2rem;height:auto}.mdb-tree-empty-icon{cursor:default}.mdb-tree-text-field{margin-top:.15rem;max-width:90%;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdb-tree-checkbox-null-container{min-width:2.2rem}.mdb-tree-indicator{position:relative;right:0;transform-origin:50% 79%;margin-right:.8rem;display:inline-block;margin-right:0rem;margin-top:.025rem;cursor:pointer;font-size:1.3rem}.mdb-tree-indicator:after{content:\"\";display:block;border-style:solid;padding:5px;margin-top:.15rem;border-width:0 3px 3px 0;font-size:1.3rem;transform:rotate(45deg)}.mdb-tree-indicator:focus{color:#4285f4}.mdb-tree-indicator:focus{outline:none}.mdb-tree-rotate-icon-open{transform:rotate(0)}.mdb-tree-rotate-icon-closed{transform:rotate(270deg)}.mdb-tree-checkbox-container{margin-top:.25rem}.mdb-tree-checkbox-container mdb-checkbox.checkbox-filled [type=checkbox][class*=filled-in]:checked+label:after{border-color:#4285f4;background-color:#4285f4}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { checked: [{
                type: HostBinding,
                args: ['class.mdb-tree']
            }, {
                type: Output
            }], checkedKeys: [{
                type: Output
            }], nodesChanged: [{
                type: Output
            }], nodes: [{
                type: Input
            }], textField: [{
                type: Input
            }], childrenField: [{
                type: Input
            }], checkboxesField: [{
                type: Input
            }], expandAll: [{
                type: Input
            }], checkboxes: [{
                type: Input
            }], toggleOnTitleClick: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,