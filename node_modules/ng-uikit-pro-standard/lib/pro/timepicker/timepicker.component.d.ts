import { ViewContainerRef, EventEmitter, OnDestroy } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { ClearButton, Rounding, SelectedTime, CloseButton } from './timepicker.interface';
import { Subject } from 'rxjs';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class MdbTimePickerComponent implements OnDestroy {
    private _overlay;
    private _vcr;
    get autoClose(): boolean;
    set autoClose(value: BooleanInput);
    private _autoClose;
    clearButton: ClearButton;
    closeButton: CloseButton;
    max: string;
    min: string;
    okButton: string;
    rounding: Rounding;
    get twelveHour(): boolean;
    set twelveHour(value: BooleanInput);
    private _twelveHour;
    timeChange: EventEmitter<object>;
    cancel: EventEmitter<object>;
    done: EventEmitter<object>;
    show: EventEmitter<object>;
    private _value;
    private _contentRef;
    private _overlayRef;
    private _portal;
    input: any;
    _selectionChange$: Subject<string>;
    constructor(_overlay: Overlay, _vcr: ViewContainerRef);
    protected _patchInputValues(): void;
    protected _timeToObj(time: any): SelectedTime;
    open(): void;
    close(doneClicked?: boolean, value?: SelectedTime): void;
    _emitTimeChangeEvent(value: SelectedTime): void;
    _emitTimeCancelEvent(value: SelectedTime): void;
    _emitTimeDoneEvent(value: SelectedTime): void;
    _emitTimeShowEvent(value: SelectedTime): void;
    _setValue(value: string): void;
    setInput(input: any): void;
    onChangeCb: (_: any) => void;
    onTouchedCb: () => void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private _getOverlayConfig;
    private _destroyOverlay;
    private _listenToOutsideClick;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbTimePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbTimePickerComponent, "mdb-timepicker", ["mdbTimePicker"], { "autoClose": "autoClose"; "clearButton": "clearButton"; "closeButton": "closeButton"; "max": "max"; "min": "min"; "okButton": "okButton"; "rounding": "rounding"; "twelveHour": "twelveHour"; }, { "timeChange": "timeChange"; "cancel": "cancel"; "done": "done"; "show": "show"; }, never, never>;
}
