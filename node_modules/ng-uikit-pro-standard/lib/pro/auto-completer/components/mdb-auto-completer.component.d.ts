import { AfterContentInit, ElementRef, EventEmitter, Renderer2, QueryList, OnDestroy } from '@angular/core';
import { MdbOptionComponent } from './mdb-option.component';
import { ISelectedOption } from '../interfaces/selected-option.interface';
import { Observable, Subject } from 'rxjs';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare type AutocompleteDropdownPosition = 'below' | 'above' | 'auto';
export declare class MdbAutoCompleterComponent implements AfterContentInit, OnDestroy {
    private renderer;
    private el;
    textNoResults: string;
    get clearButton(): boolean;
    set clearButton(value: BooleanInput);
    private _clearButton;
    get clearButtonTabIndex(): number;
    set clearButtonTabIndex(value: NumberInput);
    private _clearButtonTabIndex;
    get appendToBody(): boolean;
    set appendToBody(value: BooleanInput);
    private _appendToBody;
    dropdownPosition: AutocompleteDropdownPosition;
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    get visibleOptions(): number;
    set visibleOptions(value: NumberInput);
    _visibleOptions: number;
    get optionHeight(): any;
    set optionHeight(value: any);
    _optionHeight: number;
    get dropdownHeight(): number;
    set dropdownHeight(value: NumberInput);
    _dropdownHeight: number;
    displayValue: ((value: any) => string) | null;
    select: EventEmitter<{
        text: string;
        element: any;
    }>;
    selected: EventEmitter<{
        text: string;
        element: any;
    }>;
    optionList: Array<any>;
    mdbOptions: QueryList<MdbOptionComponent>;
    dropdown: ElementRef;
    noResultsEl: ElementRef;
    private _destroy;
    private utils;
    origin: ElementRef;
    parameters: {
        left: number;
        top: number;
        width: number;
        bottom: number;
        inputHeight: number;
    };
    readonly _isDropdownOpen: Subject<any>;
    private _allItems;
    private _isOpen;
    private _selectedItemIndex;
    private _selectedItem;
    private _selectedItemChanged;
    private _isBrowser;
    constructor(renderer: Renderer2, el: ElementRef, platformId: string);
    private _listenToOptionClick;
    private _handleOptionClick;
    setSelectedItem(item: ISelectedOption): void;
    getSelectedItem(): ISelectedOption;
    selectedItemChanged(): Observable<any>;
    isOpen(): boolean;
    _calculatePosition(): void;
    private _calculateAppendPosition;
    show(): void;
    hide(): void;
    isDropdownOpen(): Observable<any>;
    removeHighlight(index: number): void;
    highlightRow(index: number): void;
    navigateUsingKeyboard(event: any): void;
    moveHighlightedIntoView(type: string): void;
    updatePosition(parameters: {
        left: number;
        top: number;
        width: number;
        bottom: number;
    }): void;
    appendDropdown(): void;
    setSingleOptionHeight(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbAutoCompleterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbAutoCompleterComponent, "mdb-auto-completer", ["mdbAutoCompleter"], { "textNoResults": "textNoResults"; "clearButton": "clearButton"; "clearButtonTabIndex": "clearButtonTabIndex"; "appendToBody": "appendToBody"; "dropdownPosition": "dropdownPosition"; "disabled": "disabled"; "visibleOptions": "visibleOptions"; "optionHeight": "optionHeight"; "dropdownHeight": "dropdownHeight"; "displayValue": "displayValue"; }, { "select": "select"; "selected": "selected"; }, ["optionList", "mdbOptions"], ["*"]>;
}
