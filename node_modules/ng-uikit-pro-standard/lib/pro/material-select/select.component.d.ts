import { OnChanges, OnInit, EventEmitter, ExistingProvider, ElementRef, Renderer2, AfterViewInit, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SelectDropdownComponent } from './select-dropdown.component';
import { IOption } from './option-interface';
import { Option } from './option';
import { OptionList } from './option-list';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare const SELECT_VALUE_ACCESSOR: ExistingProvider;
export declare class SelectComponent implements ControlValueAccessor, OnChanges, OnInit, AfterViewInit {
    el: ElementRef;
    renderer: Renderer2;
    private document;
    private cdRef;
    options: Array<IOption>;
    customClass: string;
    get allowClear(): boolean;
    set allowClear(value: BooleanInput);
    private _allowClear;
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    highlightColor: string;
    highlightTextColor: string;
    get highlightFirst(): boolean;
    set highlightFirst(value: BooleanInput);
    private _highlightFirst;
    get multiple(): boolean;
    set multiple(value: BooleanInput);
    private _multiple;
    get noFilter(): number;
    set noFilter(value: NumberInput);
    private _noFilter;
    notFoundMsg: string;
    placeholder: string;
    filterPlaceholder: string;
    label: string;
    get filterEnabled(): boolean;
    set filterEnabled(value: BooleanInput);
    private _filterEnabled;
    get filterAutocomplete(): boolean;
    set filterAutocomplete(value: BooleanInput);
    private _filterAutocomplete;
    get visibleOptions(): number;
    set visibleOptions(value: NumberInput);
    private _visibleOptions;
    get optionHeight(): number;
    set optionHeight(value: NumberInput);
    private _optionHeight;
    get tabindex(): number;
    set tabindex(value: NumberInput);
    private _tabindex;
    get enableSelectAll(): boolean;
    set enableSelectAll(value: BooleanInput);
    private _enableSelectAll;
    get appendToBody(): boolean;
    set appendToBody(value: BooleanInput);
    private _appendToBody;
    selectAllLabel: string;
    get outline(): boolean;
    set outline(value: BooleanInput);
    private _outline;
    get required(): boolean;
    set required(value: BooleanInput);
    private _required;
    get compareWith(): (o1: any, o2: any) => boolean;
    set compareWith(fn: (o1: any, o2: any) => boolean);
    opened: EventEmitter<any>;
    closed: EventEmitter<any>;
    selected: EventEmitter<IOption>;
    deselected: EventEmitter<IOption | IOption[]>;
    noOptionsFound: EventEmitter<string>;
    changed: EventEmitter<any>;
    selectionSpan: ElementRef;
    dropdown: SelectDropdownComponent;
    filterInput: ElementRef;
    clearButton: ElementRef;
    singleContainer: ElementRef;
    multipleContainer: ElementRef;
    _value: Array<any>;
    optionList: OptionList;
    optionsLength: number;
    visibleOptionsDefault: number;
    hasSelected: boolean;
    isBrowser: boolean;
    canOpenOnFocus: boolean;
    hasFocus: boolean;
    isOpen: boolean;
    isBelow: boolean;
    filterInputWidth: number;
    isDisabled: boolean;
    placeholderView: string;
    labelActive: boolean;
    labelRef: HTMLElement;
    prefixRef: HTMLElement;
    labelRefActive: boolean;
    dropdownAnimationDone: boolean;
    clearClicked: boolean;
    selectContainerClicked: boolean;
    filterHeight: number;
    dropdownHeight: number;
    dropdownMaxHeight: number;
    OUTLINE_DROPDOWN_BOTTOM_OFFSET: number;
    OUTLINE_DROPDOWN_TOP_OFFSET: number;
    width: number;
    top: number;
    left: number;
    documentClickFun: Function;
    itemsBefore: Array<any>;
    get focused(): boolean;
    private _focused;
    onChange: (_: any) => void;
    onTouched: () => void;
    private _compareWith;
    constructor(el: ElementRef, renderer: Renderer2, document: any, platformId: string, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    private _getLabelRef;
    private _getPrefixRef;
    updateFilterHeight(): void;
    updateDropdownHeight(): void;
    onDropdownAnimationDone(): void;
    onDropdownAnimationStart(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isChild(elemnt: any): boolean;
    onWindowResize(): void;
    onSelectContainerClick(event: any): boolean;
    onSelectContainerFocus(): void;
    onSelectContainerBlur(): void;
    onSelectContainerKeydown(event: any): void;
    onDropdownOptionClicked(option: Option): void;
    onDropdownClose(focus: any): void;
    onSingleFilterClick(): void;
    onSingleFilterInput(term: string): void;
    onSingleFilterKeydown(event: any): void;
    onMultipleFilterInput(event: any): void;
    onMultipleFilterKeydown(event: any): void;
    onClearSelectionClick(event: any): void;
    onDeselectOptionClick(option: Option): void;
    /** API. **/
    open(): void;
    close(): void;
    get value(): any | any[];
    set value(v: any | any[]);
    private _setSelection;
    private _selectByValue;
    clear(): void;
    select(value: string): void;
    /** ControlValueAccessor interface methods. **/
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    valueChanged(): void;
    updateState(): void;
    /** Initialization. **/
    updateOptionsList(options: Array<IOption>): void;
    updateLabelState(): void;
    updateLabelRefState(): void;
    /** Dropdown. **/
    toggleDropdown(): void;
    openDropdown(): void;
    closeDropdown(focus?: boolean): void;
    /** Select. **/
    selectOption(option: Option): void;
    deselectOption(option: Option): void;
    clearSelection(): void;
    toggleSelectOption(option: Option): void;
    selectHighlightedOption(): void;
    deselectLast(): void;
    onSelectAll(isSelected: boolean): void;
    /** Filter. **/
    clearFilterInput(): void;
    setMultipleFilterInput(value: string): void;
    handleSelectContainerKeydown(event: any): void;
    handleMultipleFilterKeydown(event: any): void;
    handleSingleFilterKeydown(event: any): void;
    /** View. **/
    focus(): void;
    blur(): void;
    updateWidth(): void;
    updatePosition(): void;
    private _updateAppendedPosition;
    private _appendDropdown;
    updateFilterWidth(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelectComponent, "mdb-select", never, { "options": "options"; "customClass": "customClass"; "allowClear": "allowClear"; "disabled": "disabled"; "highlightColor": "highlightColor"; "highlightTextColor": "highlightTextColor"; "highlightFirst": "highlightFirst"; "multiple": "multiple"; "noFilter": "noFilter"; "notFoundMsg": "notFoundMsg"; "placeholder": "placeholder"; "filterPlaceholder": "filterPlaceholder"; "label": "label"; "filterEnabled": "filterEnabled"; "filterAutocomplete": "filterAutocomplete"; "visibleOptions": "visibleOptions"; "optionHeight": "optionHeight"; "tabindex": "tabindex"; "enableSelectAll": "enableSelectAll"; "appendToBody": "appendToBody"; "selectAllLabel": "selectAllLabel"; "outline": "outline"; "required": "required"; "compareWith": "compareWith"; }, { "opened": "opened"; "closed": "closed"; "selected": "selected"; "deselected": "deselected"; "noOptionsFound": "noOptionsFound"; "changed": "changed"; }, never, ["*"]>;
}
