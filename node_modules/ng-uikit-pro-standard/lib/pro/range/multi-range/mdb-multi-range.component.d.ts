import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { ElementRef, EventEmitter, Renderer2, OnInit, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare const RANGE_VALUE_ACCESOR: any;
export declare class MdbMultiRangeInputComponent implements OnInit, AfterViewInit, ControlValueAccessor {
    private renderer;
    id: string;
    get required(): boolean;
    set required(value: BooleanInput);
    private _required;
    name: string;
    value: {
        first: number | string;
        second: number | string;
    };
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    get min(): number;
    set min(value: NumberInput);
    private _min;
    get max(): number;
    set max(value: NumberInput);
    private _max;
    get step(): number;
    set step(value: NumberInput);
    private _step;
    rangeValueChange: EventEmitter<{
        first: number;
        second: number;
    }>;
    firstInput: ElementRef;
    secondInput: ElementRef;
    firstRangeCloud: ElementRef;
    secondRangeCloud: ElementRef;
    rangeField: ElementRef;
    range: any;
    steps: number;
    stepLength: number;
    firstVisibility: boolean;
    secondVisibility: boolean;
    cloudRange: number;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    firstRangeInput(event: any): any;
    secondRangeInput(event: any): any;
    private moveValueCloud;
    focusRangeInput(element: string): void;
    blurRangeInput(element: string): void;
    checkIfSafari(): boolean;
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbMultiRangeInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbMultiRangeInputComponent, "mdb-multi-range-input", never, { "id": "id"; "required": "required"; "name": "name"; "value": "value"; "disabled": "disabled"; "min": "min"; "max": "max"; "step": "step"; }, { "rangeValueChange": "rangeValueChange"; }, never, never>;
}
