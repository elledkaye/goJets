import { ControlValueAccessor } from '@angular/forms';
import { ElementRef, Renderer2, AfterViewInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare const RANGE_VALUE_ACCESOR: any;
export declare class MdbRangeInputComponent implements ControlValueAccessor, AfterViewInit {
    private renderer;
    private cdRef;
    input: ElementRef;
    rangeCloud: ElementRef;
    rangeField: ElementRef;
    id: string;
    get required(): boolean;
    set required(value: BooleanInput);
    private _required;
    name: string;
    value: string;
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    get min(): number;
    set min(value: NumberInput);
    private _min;
    get max(): number;
    set max(value: NumberInput);
    private _max;
    get step(): number;
    set step(value: NumberInput);
    private _step;
    get default(): boolean;
    set default(value: BooleanInput);
    private _default;
    defaultRangeCounterClass: string;
    rangeValueChange: EventEmitter<any>;
    range: any;
    stepLength: number;
    steps: number;
    cloudRange: number;
    visibility: boolean;
    onchange(event: any): void;
    oninput(event: any): void;
    constructor(renderer: Renderer2, cdRef: ChangeDetectorRef);
    focusRangeInput(): void;
    blurRangeInput(): void;
    coverage(event: any, value?: any): string;
    checkIfSafari(): boolean;
    ngAfterViewInit(): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbRangeInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbRangeInputComponent, "mdb-range-input", never, { "id": "id"; "required": "required"; "name": "name"; "value": "value"; "disabled": "disabled"; "min": "min"; "max": "max"; "step": "step"; "default": "default"; "defaultRangeCounterClass": "defaultRangeCounterClass"; }, { "rangeValueChange": "rangeValueChange"; }, never, never>;
}
