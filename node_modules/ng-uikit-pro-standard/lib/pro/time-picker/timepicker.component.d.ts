import { AfterContentChecked, AfterViewInit, ElementRef, EventEmitter, OnInit, Renderer2, ChangeDetectorRef, NgZone } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare const TIME_PIRCKER_VALUE_ACCESSOT: any;
export declare class ClockPickerComponent implements OnInit, AfterViewInit, ControlValueAccessor, AfterContentChecked {
    elem: ElementRef;
    renderer: Renderer2;
    private _cdRef;
    private _ngZone;
    private _document;
    hoursPlate: ElementRef;
    minutesPlate: ElementRef;
    plate: ElementRef;
    svg: ElementRef;
    g: ElementRef;
    hand: ElementRef;
    fg: ElementRef;
    bg: ElementRef;
    bearing: ElementRef;
    get twelvehour(): boolean;
    set twelvehour(value: BooleanInput);
    private _twelvehour;
    get darktheme(): boolean;
    set darktheme(value: BooleanInput);
    private _darktheme;
    placeholder: String;
    label: string;
    get duration(): number;
    set duration(value: NumberInput);
    private _duration;
    get showClock(): boolean;
    set showClock(value: BooleanInput);
    private _showClock;
    buttonLabel: string;
    get buttonClear(): boolean;
    set buttonClear(value: BooleanInput);
    private _buttonClear;
    get buttonClose(): boolean;
    set buttonClose(value: BooleanInput);
    private _buttonClose;
    buttonClearLabel: string;
    buttonCloseLabel: string;
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    tabIndex: any;
    get outlineInput(): boolean;
    set outlineInput(value: BooleanInput);
    private _outlineInput;
    get openOnFocus(): boolean;
    set openOnFocus(value: BooleanInput);
    private _openOnFocus;
    get readonly(): boolean;
    set readonly(value: BooleanInput);
    private _readonly;
    ampmClass: string;
    footerClass: string;
    timeChanged: EventEmitter<string>;
    isOpen: boolean;
    isMobile: any;
    touchDevice: boolean;
    showHours: boolean;
    moveEvent: string;
    tapEvent: string;
    elements: HTMLCollectionOf<Element>;
    elementNumber: any;
    dialRadius: number;
    outerRadius: number;
    innerRadius: number;
    tickRadius: number;
    diameter: number;
    isBrowser: any;
    hoursTicks: any;
    minutesTicks: any;
    selectedHours: any;
    endHours: string;
    touchSupported: any;
    mousedownEvent: any;
    mousemoveEvent: any;
    mouseupEvent: any;
    isMouseDown: boolean;
    documentClickFun: Function;
    constructor(elem: ElementRef, renderer: Renderer2, _cdRef: ChangeDetectorRef, _ngZone: NgZone, _document: any, platformId: string);
    ontouchmove(event: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentChecked(): void;
    checkDraw(): void;
    mousedown(e: any, space?: any): void;
    hideKeyboard(): void;
    onFocusInput(): void;
    openBtnClicked(): void;
    private _handleOutsideClick;
    closeBtnClicked(): void;
    close(): void;
    clearTimeInput(): void;
    setHour(hour: String): void;
    setMinute(min: String): void;
    setAmPm(ampm: String): void;
    showHoursClock(): void;
    showMinutesClock(): void;
    generateTick(): void;
    setHand(x: any, y: any, roundBy5: any): void;
    offset(obj: any): {
        left: number;
        top: number;
    };
    private _getFormattedTime;
    onChangeCb: (_: any) => void;
    onTouchedCb: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClockPickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ClockPickerComponent, "mdb-time-picker", never, { "twelvehour": "twelvehour"; "darktheme": "darktheme"; "placeholder": "placeholder"; "label": "label"; "duration": "duration"; "showClock": "showClock"; "buttonLabel": "buttonLabel"; "buttonClear": "buttonClear"; "buttonClose": "buttonClose"; "buttonClearLabel": "buttonClearLabel"; "buttonCloseLabel": "buttonCloseLabel"; "disabled": "disabled"; "tabIndex": "tabIndex"; "outlineInput": "outlineInput"; "openOnFocus": "openOnFocus"; "readonly": "readonly"; "ampmClass": "ampmClass"; "footerClass": "footerClass"; }, { "timeChanged": "timeChanged"; }, never, never>;
}
