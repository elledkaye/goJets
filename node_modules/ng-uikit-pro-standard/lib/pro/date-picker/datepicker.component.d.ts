import { IMyLocales } from './interfaces/locale.interface';
import { EventEmitter, OnChanges, SimpleChanges, ElementRef, Renderer2, AfterViewInit, ChangeDetectorRef, TemplateRef, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IMyDate, IMyMonth, IMyWeek, IMyInputFieldChanged, IMyCalendarViewChanged, IMyInputFocusBlur, IMyOptions } from './interfaces/index';
import { LocaleService } from './services/datepickerLocale.service';
import { UtilService } from './services/datepickerUtil.service';
import { Overlay, PositionStrategy, ConnectionPositionPair } from '@angular/cdk/overlay';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare const MYDP_VALUE_ACCESSOR: any;
export declare class MDBDatePickerComponent implements OnChanges, ControlValueAccessor, AfterViewInit {
    elem: ElementRef;
    private renderer;
    private localeService;
    private utilService;
    private cdRef;
    private overlay;
    private vcr;
    private _globalOptions;
    private document;
    tabIndex: any;
    options: any;
    locale: string;
    defaultMonth: string;
    selDate: string;
    label: string;
    placeholder: string;
    get selector(): number;
    set selector(value: NumberInput);
    private _selector;
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    private _disabled;
    get openOnFocus(): boolean;
    set openOnFocus(value: BooleanInput);
    private _openOnFocus;
    get outlineInput(): boolean;
    set outlineInput(value: BooleanInput);
    private _outlineInput;
    get inline(): boolean;
    set inline(value: BooleanInput);
    private _inline;
    inlineIcon: string;
    get id(): string;
    set id(value: string);
    private _id;
    dateChanged: EventEmitter<any>;
    inputFieldChanged: EventEmitter<IMyInputFieldChanged>;
    calendarViewChanged: EventEmitter<IMyCalendarViewChanged>;
    calendarToggle: EventEmitter<number>;
    inputFocusBlur: EventEmitter<IMyInputFocusBlur>;
    closeButtonClicked: EventEmitter<MDBDatePickerComponent>;
    clearButtonClicked: EventEmitter<MDBDatePickerComponent>;
    todayButtonClicked: EventEmitter<MDBDatePickerComponent>;
    divFocus: any;
    inlineInput: any;
    inlineLabel: ElementRef<HTMLElement>;
    inlineIconToggle: any;
    inlineTemplate: TemplateRef<any>;
    pickerFrame: ElementRef;
    isDateSelected: boolean;
    labelActive: boolean;
    showSelector: boolean;
    visibleMonth: IMyMonth;
    selectedMonth: IMyMonth;
    selectedDate: IMyDate;
    weekDays: Array<string>;
    dates: Array<IMyWeek>;
    selectionDayTxt: string;
    invalidDate: boolean;
    disableTodayBtn: boolean;
    dayIdx: number;
    weekDayOpts: Array<string>;
    editMonth: boolean;
    invalidMonth: boolean;
    editYear: boolean;
    invalidYear: boolean;
    prevMonthDisabled: boolean;
    nextMonthDisabled: boolean;
    prevYearDisabled: boolean;
    nextYearDisabled: boolean;
    prevMonthId: number;
    currMonthId: number;
    nextMonthId: number;
    private _uid;
    private portal;
    private overlayRef;
    isOpen: boolean;
    isDisabled: boolean;
    tmp: IMyDate;
    opts: any;
    months: any;
    years: any;
    elementNumber: any;
    firstTimeOpenedModal: boolean;
    modalHeightBefore: any;
    isMobile: any;
    isBrowser: any;
    documentClickFun: Function;
    constructor(elem: ElementRef, renderer: Renderer2, localeService: LocaleService, utilService: UtilService, cdRef: ChangeDetectorRef, overlay: Overlay, vcr: ViewContainerRef, _globalOptions: IMyOptions, document: any, platformId: string);
    ngAfterViewInit(): void;
    ChangeZIndex(): void;
    onChangeCb: (_: any) => void;
    onTouchedCb: () => void;
    setDisabledState(isDisabled: boolean): void;
    setDisabled(isDisabled: boolean): void;
    removeInlineStyle(): void;
    setLocaleOptions(): void;
    addLocale(locale: IMyLocales): void;
    setOptions(): void;
    resetMonthYearEdit(): void;
    onUserDateInput(value: string): void;
    onFocusInput(event: any): void;
    onBlurInput(event: any): void;
    onUserMonthInput(value: string): void;
    onUserYearInput(value: string): void;
    isTodayDisabled(): void;
    parseOptions(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnChanges(changes: SimpleChanges): void;
    hideKeyboard(): void;
    removeBtnClicked(): void;
    closeBtnClicked(): void;
    openBtnClicked(): void;
    setVisibleMonth(): void;
    monthList(): void;
    yearsList(): void;
    prevMonth(event?: any): void;
    nextMonth(event?: any): void;
    prevYear(): void;
    nextYear(): void;
    todayClicked(): void;
    cellClicked(cell: any): void;
    cellKeyDown(event: any, cell: any): void;
    clearDate(): void;
    selectDate(date: IMyDate): void;
    updateDateValue(date: IMyDate, clear: boolean): void;
    getDateModel(date: IMyDate): any;
    preZero(val: string): string;
    formatDate(val: any): string;
    monthText(m: number): string;
    weekText(m: string): string;
    getMonthShort(m: number): string;
    getMonthFull(m: number): string;
    monthStartIdx(y: number, m: number): number;
    daysInMonth(m: number, y: number): number;
    daysInPrevMonth(m: number, y: number): number;
    isCurrDay(d: number, m: number, y: number, cmo: number, today: IMyDate): boolean;
    getToday(): IMyDate;
    getTimeInMilliseconds(date: IMyDate): number;
    getWeekday(date: IMyDate): string;
    getDate(year: number, month: number, day: number): Date;
    sundayIdx(): number;
    generateCalendar(m: number, y: number, notifyChange: boolean): void;
    parseSelectedDate(selDate: any): IMyDate;
    parseSelectedMonth(ms: string): IMyMonth;
    setHeaderBtnDisabledState(m: number, y: number): void;
    checkActive(): boolean;
    toggleInlineDatePicker(): void;
    getOverlayPosition(): PositionStrategy;
    getPositions(): ConnectionPositionPair[];
    static ɵfac: i0.ɵɵFactoryDeclaration<MDBDatePickerComponent, [null, null, null, null, null, null, null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MDBDatePickerComponent, "mdb-date-picker", ["mdbdatepicker"], { "tabIndex": "tabIndex"; "options": "options"; "locale": "locale"; "defaultMonth": "defaultMonth"; "selDate": "selDate"; "label": "label"; "placeholder": "placeholder"; "selector": "selector"; "disabled": "disabled"; "openOnFocus": "openOnFocus"; "outlineInput": "outlineInput"; "inline": "inline"; "inlineIcon": "inlineIcon"; "id": "id"; }, { "dateChanged": "dateChanged"; "inputFieldChanged": "inputFieldChanged"; "calendarViewChanged": "calendarViewChanged"; "calendarToggle": "calendarToggle"; "inputFocusBlur": "inputFocusBlur"; "closeButtonClicked": "closeButtonClicked"; "clearButtonClicked": "clearButtonClicked"; "todayButtonClicked": "todayButtonClicked"; }, never, never>;
}
